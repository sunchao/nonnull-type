%%%%% predmap.elf
%%%%% Map Class ID to their predicate (without recursion)
%%%%% Used in proving totality of conversion
%%%%% Chao Sun
%%%%% $Id: predmap-base.elf,v 1.5 2011/04/15 19:28:43 csun Exp csun $
%%%%% Created at March, 2010
%%%%% Auto-generated file

%%% Functor Use


%{%
#define WORLDS predvar | objvar
#define data nullpred
BEGIN_ELF
%abbrev nullpred`eq = predicate`eq.
%abbrev nullpred`eq/ = predicate`eq/.
%abbrev nullpred`meta-eq = predicate`meta-eq.
%abbrev nullpred`false-implies-eq = predicate`false-implies-eq.
%abbrev nullpred`eq-reflexive = predicate`eq-reflexive.
%abbrev nullpred`eq-symmetric = predicate`eq-symmetric.
%abbrev nullpred`eq-transitive = predicate`eq-transitive.
%abbrev nullpred`leq = nullpred`eq.
%abbrev nullpred`false-implies-leq = predicate`false-implies-eq.
%abbrev nullpred`leq-reflexive = predicate`eq-reflexive.
%abbrev nullpred`leq-transitive = predicate`eq-transitive.


%theorem nullpred`leq-anti-symmetric :
        forall* {PD1:nullpred} {PD2:nullpred} 
        forall  {L12: nullpred`leq PD1 PD2} {L21: nullpred`leq PD2 PD1}
        exists  {E: nullpred`eq PD1 PD2}
        true.

- : nullpred`leq-anti-symmetric E _ E.

%worlds (predvar | objvar) (nullpred`leq-anti-symmetric _ _ _).
%total { } (nullpred`leq-anti-symmetric _ _ _).


%theorem nullpred`leq-respects-eq :
        forall* {PD1:nullpred} {PD2:nullpred} {PD3:nullpred} {PD4:nullpred}
        forall  {L1: nullpred`leq PD1 PD2}
                {E1: nullpred`eq PD1 PD3}
                {E2: nullpred`eq PD2 PD4}
        exists  {L3: nullpred`leq PD3 PD4}
        true.

- : nullpred`leq-respects-eq L _ _ L.

%worlds (predvar | objvar) (nullpred`leq-respects-eq _ _ _ _).
%total { } (nullpred`leq-respects-eq _ _ _ _).


#include "map-base.elf"
#include "map-leq.elf"
#include "map-domain.elf"
END_ELF
#undef data
%}%


%%% Renamings

%abbrev predmap = map.
