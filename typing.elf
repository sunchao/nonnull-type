%%%%% typing.elf
%%%%% Typing Rules 
%%%%% $Id: typing.elf,v 1.14 2011/01/17 04:55:03 csun Exp $
%%%%% Created at February, 2010


%%% Result for Type Inference


result : kind -> type.

%abbrev expr-result = result exprk.

%abbrev cond-result = result condk.

%abbrev args-result = result argsk.

result/expr : nulltp -> result exprk.

result/cond : result condk.

result/args/0 : result argsk.

result/args/+ : nulltp -> result argsk -> result argsk.


%%%%% Typing Rules


nullTyping : clsmap -> methmap -> oflist -> term K -> result K -> type.
     
nullCallTyping : clsmap -> methmap -> args-result 
    -> methtp -> expr-result -> type.

nullCallTyping/call : nullCallTyping _ _ result/args/0
    (methtp/base T) (result/expr T).

nullCallTyping/arg
   : nullCallTyping CM MM (result/args/+ T ARslt) (methtp/arg AF T) ERslt
      <- ({o} nullCallTyping CM MM ARslt (AF o) ERslt).


nulltLit : nullTyping _ _ L (lit O) (result/expr T)
    <- oflist-lookup L O T.

nulltNull : nullTyping _ _ _ (lit null) (result/expr nulltp/null).

% we only allow non-null type in fldmap

nulltRead 
   : nullTyping CM MM L (read E F) (result/expr (nulltp/norm N NN))
      <- nullTyping CM MM L E (result/expr (nulltp/norm C nn/yes))
      <- clsmap`lookup CM C FM
      <- fldmap`lookup FM F (nulltp/norm N NN).

nulltWrite
   : nullTyping CM MM L (write E1 F E2) (result/expr (nulltp/norm N NN))
      <- nullTyping CM MM L E1 (result/expr (nulltp/norm C nn/yes))
      <- nullTyping CM MM L E2 (result/expr (nulltp/norm N NN))
      <- clsmap`lookup CM C FM
      <- fldmap`lookup FM F (nulltp/norm N NN).

nulltLet 
   : nullTyping CM MM L (let E F) Rslt
      <- nullTyping CM MM L E (result/expr T)
      <- ({x} nullTyping CM MM (oflist/+ x T L) (F x) Rslt).

nulltIf 
   : nullTyping CM MM L (if C E1 E2) (result/expr T)
      <- nullTyping CM MM L C result/cond
      <- nullTyping CM MM L E1 (result/expr T)
      <- nullTyping CM MM L E2 (result/expr T).

nulltWhile 
   : nullTyping CM MM L (while C E) (result/expr nulltp/null)
      <- nullTyping CM MM L C _
      <- nullTyping CM MM L E Rslt.

nulltIfNotNull 
   : nullTyping CM MM L (if (not (eql (lit O) (lit null))) E1 E2) Rslt
      <- oflist-lookup L O (nulltp/norm C _)
      <- nullTyping CM MM L E2 Rslt
      <- nullTyping CM MM (oflist/+ O (nulltp/norm C nn/yes) L) E1 Rslt.

nulltSub : nullTyping CM MM L E (result/expr T')
    <- sub T T'
    <- clsmap-nulltp CM T'
    <- nullTyping CM MM L E (result/expr T).


%%%% Conditionals

nulltEql
   : nullTyping CM MM L (eql E1 E2) result/cond
      <- nullTyping CM MM L E2 _ 
      <- nullTyping CM MM L E1 _.

nulltNot
   : nullTyping CM MM L (not C) CRslt <- nullTyping CM MM L C CRslt.

nulltAnd : nullTyping CM MM L C1 CRslt ->
    nullTyping CM MM L C2 CRslt ->
    nullTyping CM MM L (and C1 C2) CRslt.


%%%% Function Calls

nulltArgs/0 : nullTyping CM MM L args/0 result/args/0.

nulltArgs/+ 
   : nullTyping CM MM L (args/+ E A) (result/args/+ T ARslt)
      <- nullTyping CM MM L E (result/expr T)
      <- ({o} nullTyping CM MM (oflist/+ o T L) A ARslt).

nulltCallConst
   : nullTyping CM MM L (call C (args/+ (alloc C S set/0) A)) Rslt
      <- clsmap`lookup CM C FM
      <- methmap`lookup MM C (methtp/arg MTF T)
      <- nullTyping CM MM L A ARslt
      <- ({t} nullCallTyping CM MM ARslt (MTF t) Rslt)
      <- fldmap`domain FM S.

nulltCallMeth
   : nullTyping CM MM L (call M A) Rslt
      <- clsmap`fresh CM M
      <- methmap`lookup MM M MT
      <- nullTyping CM MM L A ARslt 
      <- nullCallTyping CM MM ARslt MT Rslt.
		 

%%%%% Method Typing

methtpmatch* : clsmap -> methmap -> oflist -> func -> methtp -> type.
 
methtpmatch*/base 
   : methtpmatch* CM MM L (func/0 E) (methtp/base T)
      <- nullTyping CM MM L E (result/expr T).
		   
methtpmatch*/args 
   : methtpmatch* CM MM L (func/+ F) (methtp/arg MTF T)
      <- ({o} methtpmatch* CM MM (oflist/+ o T L) (F o) (MTF o)).

%abbrev methtpmatch = [CM][MM][F][MT] methtpmatch* CM MM oflist/0 F MT.


%%%%% Constructor Typing
 
constyping
   : clsmap -> methmap -> fldmap -> set -> oflist -> (object -> expr) -> type.
    
constyping/0 : constyping _ _ _ (set/0) _ ([t] lit t).

constyping/nn
   : constyping CM MM FM S L ([t] (seq (write (lit t) F E) (B t))) 
      <- fldmap`lookup FM F (nulltp/norm C nn/yes)
      <- set`remove S (set/+ F set/0) S1
      <- nullTyping CM MM L E (result/expr (nulltp/norm C nn/yes))
      <- constyping CM MM FM S1 L ([t] B t).

constyping/mn 
   : constyping CM MM FM S L ([t] (seq (write (lit t) F E) (B t)))
      <- fldmap`lookup FM F (nulltp/norm C nn/may)
      <- nullTyping CM MM L E (result/expr (nulltp/norm C _))
      <- constyping CM MM FM S L ([t] B t).

constypematch* : clsmap -> methmap -> fldmap -> set ->
   oflist -> (object -> func) -> (object -> methtp) -> type.

constypematch*/base 
   : constypematch* CM MM FM S L ([t] func/0 (E t)) ([t] methtp/base T)
      <- constyping CM MM FM S L E.
    
constypematch*/args 
   : constypematch* CM MM FM S L ([t] (func/+ ([o] F t o))) ([t] methtp/arg (CTF t) T)
      <- ({o} constypematch* CM MM FM S (oflist/+ o T L)  ([t] (F t o)) ([t] (CTF t o))).
	      
%abbrev constypematch
   = [CM][MM][FM][S][CTF][MTF] constypematch* CM MM FM S oflist/0 CTF MTF.


%%%%% Program Typing


filt-nnflds : fldmap -> set -> type.

filt-nnflds/0 : filt-nnflds fldmap`map/0 set`set/0.

filt-nnflds/in
   : filt-nnflds (fldmap`map/+ F (nulltp/norm _ nn/yes) M) S
      <- fldmap`shift F M MP
      <- filt-nnflds MP SP
      <- set`union SP (set/1 F) S.

filt-nnflds/out
   : filt-nnflds (fldmap`map/+ F (nulltp/norm _ nn/may) M) S
      <- fldmap`shift F M MP
      <- filt-nnflds MP S.


methmapmatch* : clsmap -> methmap -> methmap -> prog -> type.

methmapmatch*/0 : methmapmatch* _ _ methmap`map/0 prog`map/0.

methmapmatch*/+/const 
   : methmapmatch* CM MM0
      (methmap`map/+ N (methtp/arg ([t] CTF t) T) MM) 
      (prog`map/+ N (func/+ ([t] FUNF t)) G)
      <- clsmap`lookup CM N FM
      <- filt-nnflds FM S
      <- constypematch CM MM0 FM S FUNF CTF
      <- methmap`shift N MM MM1
      <- prog`shift N G G1
      <- methmapmatch* CM MM0 MM1 G1.

methmapmatch*/+/meth 
   : methmapmatch* CM MM0
      (methmap`map/+ N MT MM) (prog`map/+ N FUN G)
      <- clsmap`fresh CM N
      <- methtpmatch CM MM0 FUN MT
      <- methmap`shift N MM MM1
      <- prog`shift N G G1
      <- methmapmatch* CM MM0 MM1 G1.

%abbrev methmapmatch = [CM][MM][G] methmapmatch* CM MM MM G.

		   

%%% Theorems

%%% theorems about nulltyping

%theorem nulltyping-sub :
        forall* {CM} {MM} {L} {E} {C} 
        forall  {NN} {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM L}
                {NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C NN))}
        exists  {NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C nn/may))}
        true.

- : nulltyping-sub nn/may _ _ _ NTYP NTYP.

% - : nulltyping-sub nn/yes CM-CM CM-MM CM-OFL NTYP 
%      (nulltSub NTYP (clsmap-nulltp/norm IN) (sub/oo nn`subtype/my))
%      <- typing-implies-clsmap-nulltp
% 	CM-CM CM-MM CM-OFL NTYP (clsmap-nulltp/norm IN).

%worlds () (nulltyping-sub _ _ _ _ _ _).
%trustme %total  NN (nulltyping-sub NN _ _ _ _ _).


%%% theorems about constyping

%theorem constyping-respects-eq :
        forall* {CM} {MM} {FM} {S1} {S2} {L} {E}
        forall  {CTYP: constyping CM MM FM S1 L ([t] E t)}
                {EQ: set`eq S1 S2}
        exists  {CTYP: constyping CM MM FM S2 L ([t] E t)}
        true.

- : constyping-respects-eq CTYP set`eq/ CTYP.

%worlds () (constyping-respects-eq _ _ _).
%total  {} (constyping-respects-eq _ _ _).


%%% theorems about filt-nnflds

%theorem filt-nnflds-preserves-fresh/L :
	forall* {M} {MP} {N1} {N2} {T} 
	forall  {FS: fldmap`fresh (fldmap`map/+ N2 T M) N1}
		{SH: fldmap`shift N2 M MP}
		{NE: nat`ne N1 N2}
	exists  {FS: fldmap`fresh MP N1}
	true.

- : filt-nnflds-preserves-fresh/L
     (fldmap`fresh/< N2>N1) N2<<M=MP _ N1/MP
     <- fldmap`shift-implies-fresh* N2<<M=MP (nat`ge/> N2>N1) N1/MP.

- : filt-nnflds-preserves-fresh/L 
     (fldmap`fresh/> N0/M SN0+N2=N1) N2<<M=MP N1!=N2 N1/MP
     <- nat`plus-swap-succ SN0+N2=N1 N0+SN2=N1
     <- nat`plus-commutative N0+SN2=N1 SN2+N0=N1
     <- fldmap`shift-preserves-fresh N0/M SN2+N0=N1 M2 N2<<M=M2 N1/M2
     <- fldmap`shift-deterministic N2<<M=M2 N2<<M=MP nat`eq/ fldmap`eq/ M2=MP
     <- fldmap`fresh-respects-eq N1/M2 M2=MP nat`eq/ N1/MP.

%worlds () (filt-nnflds-preserves-fresh/L _ _ _ _).
%total  (FS) (filt-nnflds-preserves-fresh/L FS _ _ _).


%theorem filt-nnflds-preserves-fresh :
	forall* {FM} {S} {F}
	forall  {NS: filt-nnflds FM S}
		{FS: fldmap`fresh FM F}
	exists  {NM: set`not-member S F}
	true.

- : filt-nnflds-preserves-fresh filt-nnflds/0 _ set`not-member/0.

- : filt-nnflds-preserves-fresh
     (filt-nnflds/in SPUN=S MP->SP N<<M=MP) F/FM F/S
     <- fldmap`fresh-lookup-not-equal F/FM (fldmap`lookup/= nat`eq/) F!=N
     <- filt-nnflds-preserves-fresh/L F/FM N<<M=MP F!=N F/MP
     <- filt-nnflds-preserves-fresh MP->SP F/MP F/SP
     <- set`unit-union-implies-add SPUN=S SP+N=S
     <- set`update-preserves-not-member F/SP SP+N=S F!=N F/S.

- : filt-nnflds-preserves-fresh
     (filt-nnflds/out MP->S N<<M=MP) F/FM F/S
     <- fldmap`fresh-lookup-not-equal F/FM (fldmap`lookup/= nat`eq/) F!=N
     <- filt-nnflds-preserves-fresh/L F/FM N<<M=MP F!=N F/MP
     <- filt-nnflds-preserves-fresh MP->S F/MP F/S.

%worlds () (filt-nnflds-preserves-fresh _ _ _).
%total  (NS) (filt-nnflds-preserves-fresh NS _ _).

%theorem filt-nnflds-lookup-implies-member :
        forall* {FM} {S} {F} {C} 
        forall  {NNS: filt-nnflds FM S}
                {L: fldmap`lookup FM F (nulltp/norm C nn/yes)}
        exists  {MB: set`member S F}
        true.

- : filt-nnflds-lookup-implies-member
     (filt-nnflds/in S2UN=S _ _) (fldmap`lookup/= N=F) NinS
     <- set`union-implies-leq S2UN=S _ N<=S
     <- set`member-respects-leq (set`lookup/= nat`eq/) N<=S NinS.

- : filt-nnflds-lookup-implies-member
     (filt-nnflds/in S2UN=S FM2->S2 N<<FM1=FM2) (fldmap`lookup/> FM1#N0 SN0+N=F) FinS
     <- nat`plus-swap-succ SN0+N=F N0+SN=F
     <- nat`plus-commutative N0+SN=F SN+N0=F 
     <- fldmap`shift-preserves-lookup* FM1#N0 N<<FM1=FM2 SN+N0=F FM2#F
     <- filt-nnflds-lookup-implies-member FM2->S2 FM2#F FinS2
     <- set`union-implies-leq S2UN=S S2<=S _
     <- set`member-respects-leq FinS2 S2<=S FinS.

- : filt-nnflds-lookup-implies-member
     (filt-nnflds/out FM2->S N<<FM1=FM2) (fldmap`lookup/> FM1#N0 SN0+N=F) FinS
     <- nat`plus-swap-succ SN0+N=F N0+SN=F
     <- nat`plus-commutative N0+SN=F SN+N0=F
     <- fldmap`shift-preserves-lookup* FM1#N0 N<<FM1=FM2 SN+N0=F FM2#F
     <- filt-nnflds-lookup-implies-member FM2->S FM2#F FinS.

%worlds () (filt-nnflds-lookup-implies-member _ _ _).
%total  (NNS) (filt-nnflds-lookup-implies-member NNS _ _).
