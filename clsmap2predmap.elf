%%%% clsmap2predmap.elf
%%%%% Chao Sun
%%%%% Jun 30, 2010

%abbrev all : nat = z.

%abbrev own : nat = s z.

%abbrev allPerm : object -> permission = ([r] (unitperm (basic r all null))).

%abbrev sharedPerm = unitperm (basic null own null).

%abbrev nestInShared : object -> formula = ([r] (nested (allPerm r) null own)).

%abbrev conj2pred : (nullpred -> object -> formula) -> nullpred 
	= [g] (predicate/Y ([f] (predicate/+ ([o] predicate/0 (g f o))))).


fldnn2perm : nat -> nn -> (nullpred -> object -> permission) -> type.

fldnn2perm/yes : fldnn2perm F nn/yes
    ([p][r] (unitperm (precise-exists r F 
	([o] (unitperm (nonlinear 
	    (conj (nestInShared o) (predcall p (predargs/1 o))))))))).

fldnn2perm/may : fldnn2perm F nn/may
    ([p][r] (unitperm (precise-exists r F
        ([o] (unitperm (conditional (objequal o null) empty
	    (unitperm (nonlinear
	        (conj (nestInShared o) (predcall p (predargs/1 o))))))))))).



fldmap2conj : clsmap -> predmap -> fldmap -> 
     (object -> formula) -> predmap -> type.

fldmap2conj/0 : fldmap2conj CM PM fldmap`map/0 ([o] t) PM.

fldmap2conj/null
   : fldmap2conj CM PMin (fldmap`map/+ F nulltp/null FM) 
      ([o] (G o)) PMout
      <- fldmap`shift F FM FM'
      <- fldmap2conj CM PMin FM' ([o] G o) PMout.
		    
fldmap2conj/norm/in 
   : fldmap2conj CM PMin (fldmap`map/+ F (nulltp/norm C N) FM)
      ([r] conj (nested (PF CP r) null own) (G r)) PMout
      <- predmap`lookup PMin C CP
      <- fldmap`shift F FM FM'
      <- fldnn2perm F N ([p][r] PF p r)
      <- fldmap2conj CM PMin FM' ([r] G r) PMout.

fldmap2conj/norm/out 
   : fldmap2conj CM PMin (fldmap`map/+ F (nulltp/norm C N) FM)
      ([r] conj (nested (PF (conj2pred CJ) r) null own) (G r)) PMout
      <- predmap`fresh PMin C 
      <- clsmap`lookup CM C KM
      <- fldmap`shift F FM FM'
      <- fldnn2perm F N ([p][r] PF p r)
      <- ({f} predmap`update PMin C f (PMF' f))
      <- ({f} fldmap2conj CM (PMF' f) KM ([o] CJ f o) (PMF f))
      <- fldmap2conj CM (PMF (conj2pred CJ)) FM' ([r] G r) PMout.
	 

clsmap2predmap* : clsmap -> predmap -> clsmap -> predmap -> type.

%abbrev clsmap2predmap
   = [CM][PM] clsmap2predmap* CM predmap`map/0 CM PM.

clsmap2predmap*/0 : clsmap2predmap* _ PM clsmap`map/0 PM.

clsmap2predmap*/in
   : clsmap2predmap* M PMin (clsmap`map/+ C _ CM) PMout
      <- predmap`domain? PMin C true
      <- clsmap`shift C CM CM'
      <- clsmap2predmap* M PMin CM' PMout.

clsmap2predmap*/out
   : clsmap2predmap* M PMin (clsmap`map/+ C FM CM) PMout
      <- predmap`domain? PMin C false
      <- clsmap`shift C CM CM'
      <- ({f} predmap`update PMin C f (PMF' f))
      <- ({f} fldmap2conj M (PMF' f) FM ([o] CJ f o) (PMF f))
      <- clsmap2predmap* M (PMF (conj2pred CJ)) CM' PMout.

