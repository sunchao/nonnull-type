%%%%% conversion.elf
%%%%% Conversion from nonnull type to permission type
%%%%% Chao Sun
%%%%% July 14, 2010

%abbrev null-perm = [o] unitperm 
	(conditional (objequal o null) empty (unitperm (nonlinear f))).	     

nn2perm : nn -> (nullpred -> object -> permission) -> type.

nn2perm/yes : nn2perm nn/yes
	([p][o] 
	   (unitperm 
	      (nonlinear 
		 (conj
		    (neg (objequal o null))
		    (conj
		       (nestInShared o) 
		       (predcall p (predargs/1 o))))))).

nn2perm/may : nn2perm nn/may
	([p][o] unitperm (conditional (objequal o null)
		empty 
		(unitperm (nonlinear 
			(conj (nestInShared o) (predcall p (predargs/1 o))))))).
     

fldmap2perm : fldmap -> (object -> permission) -> type.

fldmap2perm/0 
   : fldmap2perm fldmap`map/0 ([t] (unitperm (basic t all null))).

fldmap2perm/+ 
   : fldmap2perm (fldmap`map/+ F _ FM) 
      ([t] (Pi t) , (unitperm (basic t F null)))
      <- fldmap`shift F FM FM'
      <- fldmap2perm FM Pi.


nulltp2perm : predmap -> nulltp -> (object -> permission) -> type.

nulltp2perm/null
   : nulltp2perm _ nulltp/null ([r] unitperm (nonlinear (objequal r null))).

nulltp2perm/norm
   : nulltp2perm PM (nulltp/norm C NN) (PF PD)
      <- nn2perm NN PF
      <- predmap`lookup PM C PD.


methtp2proctype* : predmap -> permission -> methtp -> proctype -> type.

%abbrev methtp2proctype = [PM][MT][PT] methtp2proctype* PM empty MT PT.


methtp2proctype*/base 
   : methtp2proctype* PM Pi (methtp/base T) 
      (proctype/base (sharedPerm , Pi)
	 (output/exists ([ret] (output/expr ret (sharedPerm , (PF ret))))))
      <- nulltp2perm PM T PF.

methtp2proctype*/arg
   : methtp2proctype* PM Pi (methtp/arg MTF T) (proctype/arg PTF)
      <- nulltp2perm PM T PF
      <- ({o} methtp2proctype* PM (Pi , (PF o)) (MTF o) (PTF o)).

constp2proctype* : predmap -> fldmap -> permission -> 
	(object -> methtp) -> (object -> proctype) -> type.

%abbrev constp2proctype 
   = [PM][FM][CTF][PTF] constp2proctype* PM FM empty CTF PTF.
	
constp2proctype*/base 
   : constp2proctype* PM FM Pi ([t] methtp/base T)
      ([t] proctype/base (sharedPerm , Pi , (F t))
	 (output/exists ([ret] (output/expr ret (sharedPerm , (PF ret))))))
      <- fldmap2perm FM F
      <- nulltp2perm PM T PF.

constp2proctype*/arg 
   : constp2proctype* 
      PM FM Pi ([t] methtp/arg (CTF t) T) ([t] proctype/arg (PTF t))
      <- nulltp2perm PM T PF
      <- ({o} constp2proctype* PM FM (Pi , (PF o)) ([t] CTF t o) ([t] PTF t o)).


env2perm : predmap -> clsmap -> methmap -> progtype -> type.

env2perm/0 : env2perm _ _ methmap`map/0 progtype`map/0.

% constructor
env2perm/c 
   : env2perm PM CM
      (methmap`map/+ N (methtp/arg CTF _) MM) 
      (progtype`map/+ N (proctype/arg PTF) W)
      <- clsmap`lookup CM N FM
      <- constp2proctype PM FM CTF PTF
      <- methmap`shift N MM MM'
      <- env2perm PM CM MM' W'
      <- progtype`shift N W' W.

% method
env2perm/m
   : env2perm PM CM
      (methmap`map/+ N MT MM) 
      (progtype`map/+ N PT W)
      <- clsmap`fresh CM N 
      <- methtp2proctype PM MT PT
      <- methmap`shift N MM MM'
      <- env2perm PM CM MM' W'
      <- progtype`shift N W' W.


oflist2perm : predmap -> oflist -> permission -> type.

oflist2perm/0 : oflist2perm _ oflist/0 sharedPerm.

oflist2perm/+ 
   : oflist2perm PM (oflist/+ O T L) ((PF O) , Pi)
      <- oflist2perm PM L Pi
      <- nulltp2perm PM T PF.


perm-output : predmap -> permission -> result K -> output K -> type.

perm-output/exists
   : perm-output PM Pi Rslt (output/exists ([v] Out v))
      <- ({v:object} perm-output PM Pi Rslt (Out v)).
		      
perm-output/expr
   : perm-output PM Pi (result/expr T) 
      (output/exists ([v] (output/expr v ((PF v) , Pi))))
      <- nulltp2perm PM T PF.

perm-output/cond : perm-output _ Pi result/cond (output/cond _ Pi Pi).
	    
perm-output/args/0
   : perm-output PM Pi result/args/0 (output/args/0 Pi).

perm-output/args/+ 
   : perm-output PM Pi (result/args/+ T Rslt)
      (output/exists ([v] (output/args/+ v Out)))
      <- perm-output PM Pi Rslt Out.


%%% Theorems

%theorem nn2perm-total :
        forall {NN}
        exists {PF} {NN2P: nn2perm NN PF}
        true.

- : nn2perm-total nn/may _ nn2perm/may.

- : nn2perm-total nn/yes _ nn2perm/yes.

%worlds () (nn2perm-total _ _ _).
%total  {} (nn2perm-total _ _ _).
 
