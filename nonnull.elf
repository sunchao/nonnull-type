%%%%% nonnull.elf
%%%%% Non-null Type
%%%%% Chao Sun
%%%%% $Id$
%%%%% Created at February, 2010


nonnull : type.

nonnull/yes : nonnull.

nonnull/maybe : nonnull.


eq : nonnull -> nonnull -> type.

eq/ : eq NN NN.


subtype : nonnull -> nonnull -> type.

subtype/my : subtype nonnull/yes nonnull/maybe.

subtype/ref : subtype N N.


%%% Theorems

%theorem false-implies-eq :
	forall* {X1} {X2}
	forall {F:void}
	exists {E:eq X1 X2}
	true.

%worlds () (false-implies-eq _ _).
%total { } (false-implies-eq _ _).


%theorem meta-eq :
	forall {X1} {X2} {E:eq X1 X2}
	true.

- : meta-eq _ _ eq/.

%worlds () (meta-eq _ _ _).
%total { } (meta-eq _ _ _).
%reduces X = Y (meta-eq X Y _).

	
%theorem eq-reflexive : 
	forall {X} 
	exists {E:eq X X} 
	true.

- : eq-reflexive _ eq/.

%worlds () (eq-reflexive _ _).
%total { } (eq-reflexive _ _).


%theorem eq-symmetric : 
	forall* {X} {Y}
	forall {E:eq X Y}
	exists {F:eq Y X}
	true.

- : eq-symmetric (eq/) (eq/).

%worlds () (eq-symmetric _ _).
%total { } (eq-symmetric _ _).


%theorem eq-transitive : 
	forall* {X} {Y} {Z}
	forall {E1:eq X Y} {E2:eq Y Z}
	exists {F:eq X Z}
	true.

- : eq-transitive (eq/) (eq/) (eq/).

%worlds () (eq-transitive _ _ _).
%total { } (eq-transitive _ _ _).


%%%% Exports

%abbrev nn`eq = eq.
%abbrev nn`eq/ = eq/.
%abbrev nn`false-implies-eq = false-implies-eq.
%abbrev nn`meta-eq = meta-eq.
%abbrev nn`eq-reflexive = eq-reflexive.
%abbrev nn`eq-symmetric = eq-symmetric.
%abbrev nn`eq-transitive = eq-transitive.
%abbrev nn = nonnull.
%abbrev nn/yes = nonnull/yes.
%abbrev nn/may = nonnull/maybe.
%abbrev nn`subtype = subtype.
%abbrev nn`subtype/my = subtype/my.
%abbrev nn`subtype/ref = subtype/ref.
