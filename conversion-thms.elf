%%%%% conversion-thms.elf
%%%%% Theorems about conversion
%%%%% $Id: conversion-thms.elf,v 1.16 2010/12/01 14:43:28 csun Exp csun $

%theorem convert/expr-ok :
        forall* {PM} {CM} {MM} {OFL} {W} {Pi} {T} {E: term exprk} 
        forall  {CM2PM: clsmap2predmap CM PM}
                {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM OFL}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM OFL Pi}
		{NTYP: nullTyping CM MM OFL E (result/expr T)}
        exists  {PF} {T2P: nulltp2perm PM T ([r] PF r)}
                {TYP: typing W Pi E
		       (output/exists [r] (output/expr r ((PF r) , Pi)))}
        true.

%theorem convert/cond-ok :
        forall* {PM} {CM} {MM} {OFL} {W} {Pi} {C: term condk} 
        forall  {CM2PM: clsmap2predmap CM PM}
                {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM OFL}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM OFL Pi}
		{NTYP: nullTyping CM MM OFL C result/cond}
        exists  {Out: output condk} {TYP: typing W Pi C Out}
                {PM: perm-output PM Pi result/cond Out}
        true.

%theorem convert/args-ok :
        forall* {PM} {CM} {MM} {OFL} {W} {Pi} {A: term argsk} {ARslt}
        forall  {CM2PM: clsmap2predmap CM PM}
                {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM OFL}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM OFL Pi}
		{NTYP: nullTyping CM MM OFL A ARslt}
        exists  {AOut: output argsk} {TYP: typing W Pi A AOut}
                {PM: perm-output PM Pi ARslt AOut}
        true.

- : convert/cond-ok
     CM2PM CM-CM CM-MM CM-L MM2W L2P (nulltNot NTYP) _ TYP' CPO'
     <- convert/cond-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYP _ TYP CPO
     <- conversion-helper/not TYP CPO _ TYP' CPO'.

- : convert/cond-ok
     CM2PM CM-CM CM-MM CM-L MM2W L2P (nulltAnd NTYP1 NTYP2) _
     (tTrans2 (tAnd TYP1 AH) T) CPO4
     <- convert/cond-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYP1 _ TYP1 CPO1
     <- convert/cond-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYP2 _ TYP2 CPO2
     <- conversion-helper/and CPO1 TYP2 _ Out4 AH T CPO4.

- : convert/cond-ok CM2PM CM-CM CM-MM CM-L MM2W L2P (nulltEql NTYPE1 NTYPE2) _ 
     (tEql1
	TYPE1
	(letTyping/exists [v1]
	   (letTyping/base v1
	      (tEql2
		 (TYPE2' v1)
		 (letTyping/exists [v2]
		    (letTyping/base v2
		       (tTrans2
			  (tEql:typing _ _ (eql (lit v1) (lit v2)) _)
			  (transform/cond
			     (bimplies/reflexive)
			     (bimplies/reflexive)
			     (implies/trans3
				(implies/combine
				   (implies/trans
				      (implies/nonlinear bimplies/tt)
				      (implies/true2empty))
				   (implies/trans5
				      (implies/combine
					 (REM1 v1) 
					 (implies/combine
					    (REM2 v2)
					    (implies/reflexive)))
				      (implies/equiv equiv/commute)
				      (implies/equiv equiv/identity)
				      (implies/equiv equiv/commute)
				      (implies/equiv equiv/identity)))
				(implies/equiv equiv/commute)
				(implies/equiv equiv/identity))
			     (implies/trans3
				(implies/combine
				   (implies/trans
				      (implies/nonlinear bimplies/tt)
				      (implies/true2empty))
				   (implies/trans5
				      (implies/combine
					 (REM1 v1) 
					 (implies/combine
					    (REM2 v2)
					    (implies/reflexive)))
				      (implies/equiv equiv/commute)
				      (implies/equiv equiv/identity)
				      (implies/equiv equiv/commute)
				      (implies/equiv equiv/identity)))
				(implies/equiv equiv/commute)
				(implies/equiv equiv/identity))))))))))
     (perm-output/exists ([v1] (perm-output/exists ([v2] (perm-output/cond)))))
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPE1 _ T2P1 TYPE1
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPE2 _ T2P2 TYPE2
     <- conversion-helper/write3 T2P1 TYPE2 ([v] TYPE2' v)
     <- clspred-implies-empty T2P1 ([r] REM1 r)
     <- clspred-implies-empty T2P2 ([r] REM2 r).

- : convert/expr-ok _ _ _ _ _ L2P (nulltLit L) _ T2P 
     (tTrans2 tObjLoc 
	(transform/trans
	   (transform/implies I)
	   (transform/gen-exists _)))
   <- oflist-lookup-implies-clspred _ L L2P _ T2P I.

- : convert/expr-ok _ _ _ _ _ _ nulltNull _ nulltp2perm/null
     (tTrans2 tObjLoc 
	(transform/trans
	   (transform/implies
	      (implies/trans3
		 (implies/equiv (equiv/symmetric equiv/identity))
		 (implies/equiv equiv/commute)
		 (implies/combine
		    (implies/trans
		       (implies/empty2true)
		       (implies/nonlinear bimplies/objequal-reflexive))
		    (implies/reflexive))))
	   (transform/gen-exists null))).

- : convert/expr-ok
     CM2PM CM-CM CM-MM CM-OFL MM2W L2P (nulltLet ([o] NTYPF o) NTYPE)
     _ T2POut 
     (tTrans2
	(tLet 
	   TYPE
	   (letTyping/exists [x]
	      (letTyping/base x
		 (tTrans2
		    (TYPF2 x)
		    (transform/inside [r]
		       (transform/implies
			  (implies/trans4
			     (implies/equiv equiv/roll2)
			     (implies/combine
				(I x)
				(implies/reflexive))
			     (implies/equiv equiv/commute)
			     (implies/equiv equiv/identity))))))))
	(transform/rem-unused))
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W L2P NTYPE _ T2P TYPE
     <- typing-implies-clsmap-nulltp CM-CM CM-MM CM-OFL NTYPE CM-T
     <- ({o} convert/expr-ok CM2PM CM-CM CM-MM 
	   (clsmap-oflist/+ CM-T CM-OFL) MM2W (oflist2perm/+ T2P L2P)
	   (NTYPF o) _ (T2POutF o) (TYPF o))
     <- conversion-helper/let3 ([o] T2POutF o) PF ([o][o1] EQ o o1) T2POut
     <- conversion-helper/let4 EQ TYPF TYPF2
     <- clspred-implies-empty T2P ([r] I r).
	   
- : convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P
     (nulltWhile NTYPE NTYPC) _ nulltp2perm/null
     (tTrans2 (tWhile (transform/reflexive) (letTyping/base null TYPC) WT DV T1) 
	(transform/trans3 T2
	   (transform/implies
	      (implies/trans3
		 (implies/equiv (equiv/symmetric equiv/identity))
		 (implies/equiv equiv/commute)
		 (implies/combine
		    (implies/trans
		       (implies/empty2true)
		       (implies/nonlinear bimplies/objequal-reflexive))
		    (implies/reflexive))))
	   (transform/gen-exists null)))
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPE _ _ TYPE
     <- convert/cond-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPC _ TYPC CPO
     <- conversion-helper/while
	(tTrans2 TYPE (transform/inside ([v] transform/drop))) 
	CPO _ _ _ WT DV T1 T2.

- : convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P
     (nulltSub NTYPE CM-T' SUB) _ T2P'
     (tTrans2 
	TYPE
	(transform/inside [r]
	   (transform/implies
	      (implies/combine
		 (I r)
		 (implies/reflexive)))))
     <- clsmap-nulltp-implies-nulltp2perm CM2PM CM-T' _ T2P'
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPE _ T2P TYPE 
     <- conversion-helper/sub SUB T2P T2P' ([o] I o).

- : convert/expr-ok
     CM2PM CM-CM CM-MM CM-L MM2W L2P (nulltIf NTYPE2 NTYPE1 NTYPC) 
     PF2 T2P2 (tTrans2 (tIf TYPC IFTYP) T) 
     <- convert/cond-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPC XX TYPC CPO
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPE1 PF1 T2P1 TYP1 
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPE2 PF2 T2P2 TYP2
     <- nulltp2perm-deterministic T2P1 T2P2 predmap`eq/ nulltp`eq/ ([o] PFEQ o)
     <- ({o} combine-preserves-eq (PFEQ o) permission`eq/ (PEQ o))
     <- ({o} output/expr-preserves-eq object`eq/ (PEQ o) (OEQ o))
     <- output/exists-preserves-eq OEQ OEQ'
     <- typing-respects-eq TYP1 progtype`eq/ permission`eq/ term`eq/ OEQ' TYP1'
     <- conversion-helper/if TYP1' TYP2 (perm-output/expr T2P2) CPO YY IFTYP T.


- : convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P
     (nulltIfNotNull NTYP1 NTYP2 (OF-LP:oflist-lookup _ O _)) _ T2P2
     (tIf 
	(tTrans2 (tNot tEql notEnv/base)
	   (transform/cond
	      (bimplies/reflexive)
	      (bimplies/reflexive)
	      (implies/trans3
		 (implies/combine implies/reflexive I1)
		 (implies/equiv equiv/associate)
		 (implies/combine
		    (I2 O)
		    (implies/reflexive)))
	      (implies/trans3
		 (implies/combine
		    (implies/trans
		       (implies/nonlinear bimplies/tt)
		       (implies/true2empty))
		    (implies/reflexive))
		 (implies/equiv equiv/commute)
		 (implies/equiv equiv/identity))))
	(ifTyping/base 
	   (tTrans2 TYP1'
	      (transform/inside [_]
		 (transform/implies
		    (implies/combine
		       (implies/reflexive)
		       (implies/trans3
			  (implies/combine
			     (implies/trans
				(implies/nonlinear bimplies/tt)
				(implies/true2empty))
			     (implies/reflexive))
			  (implies/equiv equiv/commute)
			  (implies/equiv equiv/identity))))))
	   TYP2))
     <- oflist-lookup-implies-clsmap-nulltp CM-L OF-LP (clsmap-nulltp/norm IN)
     <- oflist-lookup-implies-clspred _ OF-LP L2P _ (nulltp2perm/norm PM-LP NN2P) I1
     <- clspred-remove-cond PM-LP NN2P ([o] I2 o)
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYP2 PF2 T2P2 TYP2
     <- convert/expr-ok CM2PM CM-CM CM-MM
	(clsmap-oflist/+ (clsmap-nulltp/norm IN) CM-L) 
	MM2W (oflist2perm/+ (nulltp2perm/norm PM-LP nn2perm/yes) L2P) 
	NTYP1 PF1 T2P1 TYP1
     <- nulltp2perm-deterministic T2P1 T2P2 predmap`eq/ nulltp`eq/ ([o] PFEQ o)
     <- ({o} combine-preserves-eq (PFEQ o) permission`eq/ (PEQ o))
     <- ({o} output/expr-preserves-eq object`eq/ (PEQ o) (OEQ o))
     <- output/exists-preserves-eq OEQ OEQ'
     <- typing-respects-eq TYP1 progtype`eq/ permission`eq/ term`eq/ OEQ' TYP1'.

- : convert/expr-ok
     CM2PM CM-CM CM-MM CM-L MM2W L2P (nulltCallMeth NTYPC NTYPA MM-LP CM-FS) 
     PF T2P (tTrans2 (tCall W-LP (tTrans2 TYPA TA) TYPC) TO) 
     <- lookup-implies-clsmap-methtp CM-MM MM-LP CM-MT
     <- methmap2progtype-implies-methtp2proctype MM2W CM-FS MM-LP PT W-LP MT2PT
     <- convert/args-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPA _ TYPA APO
     <- conversion-helper/callmeth 
	CM2PM MM2W CM-MT L2P NTYPC APO MT2PT AOut' TA Out TYPC PF TO T2P.

- : convert/expr-ok
     CM2PM CM-CM CM-MM CM-L MM2W L2P 
     (nulltCallConst FM-DM1 ([t] NTYPC t) NTYPA MM-LP CM-LP) _ T2P
     (tTrans2
	(tCall W-LP
	   (tTrans2
	      (tArgs1
		 (tTrans2 (tAlloc ([t] AF1 t))
		    (transform/inside [t]
		       (transform/implies
			  (implies/equiv equiv/commute))))
		 (letTyping/exists [t]
		    (letTyping/base t (tArgs (TYP2 t)))))
	      (transform/inside [t]
		 (transform/args/+ (TA t))))
	   (callTyping/exists [t]
	      (callTyping/arg t (CTYP t))))
	(transform/trans
	   (transform/inside [t] (TE t))
	   (transform/rem-unused)))
     <- methmap2progtype-implies-constp2proctype 
	MM2W CM-LP MM-LP _ W-LP (constp2proctype/ ([t] MT2PT t) ([t] AF2 t) FM-DM2)
     <- fldmap`domain-deterministic FM-DM2 FM-DM1 fldmap`eq/ SEQ
     <- allocFields-respects-eq ([t] AF2 t) SEQ ([t] permission`eq/) ([t] AF1 t)
     <- convert/args-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYPA _ TYPA APO
     <- ({t} typing-frame TYPA _ (EA t) (TYP2 t))
     <- writeshared-can-move-front L2P _ EQV
     <- conversion-helper/callconst/L 
	CM2PM MM2W EA ([t] implies/reflexive) EQV APO ([t] NTYPC t)
	([t] MT2PT t) _ ([t] TA t) _ ([t] CTYP t) _ T2P TE.

- : convert/expr-ok
     CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P
     (nulltRead FM-LP CM-LP NTYP) _ (nulltp2perm/norm PM-FLP NN2P)
     (tTrans2
	(tRead1 
	   TYPE'
	   (letTyping/exists [v]
	      (letTyping/base v
		 (tTrans
		    (transform/trans3 
		       (transform/implies
			  (implies/trans3
			     (implies/combine
				(implies/trans6
				   (implies/conj2combine)
				   (implies/trans3
				      (implies/combine
					 (implies/trans
					    (implies/nonlinear bimplies/tt)
					    (implies/true2empty))
					 (implies/reflexive))
				      (implies/equiv equiv/commute)
				      (implies/equiv equiv/identity))
				   (implies/conj2combine)
				   (implies/combine
				      (implies/trans
					 (implies/nonlinear bimplies/tt)
					 (implies/true2empty))
				      (I1 v))
				   (implies/equiv equiv/commute)
				   (implies/equiv equiv/identity))
				(implies/equiv EQV))
			     (I2 v) 
			     (implies/combine 
				(implies/equiv (equiv/symmetric equiv/one))
				(implies/reflexive))))
		       (transform/skolem) 
		       (transform/inside 
			  ([r] 
			     (transform/implies
				(implies/trans
				   (implies/combine
				      (implies/equiv equiv/distribute)
				      (implies/reflexive))
				   (implies/equiv
				      (equiv/symmetric equiv/associate)))))))
		    (letTyping/exists 
		       ([r] 
			  (letTyping/base null
			     (tRead:typing _ _ (read (lit v) _) _))))
		    (transform/inside
		       ([r] 
			  (transform/implies
			     (implies/trans8
				(implies/equiv equiv/associate)
				(implies/combine
				   (implies/trans5
				      (implies/equiv
					 (equiv/symmetric equiv/distribute))
				      (implies/equiv equiv/one)
				      (implies/combine
					 (implies/reflexive)
					 (DUP r))
				      (implies/equiv equiv/associate)
				      (implies/combine
					 (implies/pack r) (implies/reflexive)))
				   (implies/reflexive))
				(implies/equiv
				   (equiv/symmetric equiv/associate))
				(implies/combine
				   (implies/reflexive)
				   (implies/equiv equiv/roll2))
				(implies/equiv equiv/associate)
				(implies/combine
				   (implies/linear-modus-ponens) 
				   (implies/reflexive))
				(implies/equiv equiv/roll2)
				(implies/combine
				   (implies/reflexive)
				   (implies/equiv (equiv/symmetric EQV)))))))))))
	(transform/rem-unused))
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P NTYP 
	_ (nulltp2perm/norm PM-LP1 nn2perm/yes) TYPE
     <- clsmap2predmap-implies-predmap-lookup CM2PM CM-LP _ PM-LP2
     <- predmap`lookup-deterministic PM-LP1 PM-LP2 predmap`eq/ nat`eq/ PEQ
     <- typing-preserves-eq nn2perm/yes PEQ TYPE TYPE'
     <- writeshared-can-move-front OFL2P _ EQV
     <- lookup-fldperm CM2PM PM-LP2 CM-LP FM-LP _ _ _ FNN2P PM-FLP I1
     <- get-precise-exists FNN2P PM-FLP _ NN2P I2
     <- clspred-can-be-duplicated (nulltp2perm/norm PM-FLP NN2P) DUP.

%%% for lookup-fldperm, I assume it will get a (conj2pred CJ), however, 
%%% PM-LP doesn't know this, it gave a more generic result.

- : convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P
     (nulltWrite FM-LP CM-LP NTYPE2 NTYPE1) _ (nulltp2perm/norm PM-FLP1 NN2P1)
     (tTrans2
	(tWrite1
	   TYPE1'
	   (letTyping/exists [v]
	      (letTyping/base v
		 (tWrite2
		    (TYPE3 v)  %{ PF1 , (PF2 , Pi) }%
		    (letTyping/exists [v']
		       (letTyping/base v'
			  (tTrans
			     (transform/trans3
				(transform/implies
				   (implies/trans5
				      (implies/combine
					 (implies/trans6
					    (implies/conj2combine)
					    (implies/trans3
					       (implies/combine
						  (implies/trans
						     (implies/nonlinear bimplies/tt)
						     (implies/true2empty))
						  (implies/reflexive))
					       (implies/equiv equiv/commute)
					       (implies/equiv equiv/identity))
					    (implies/conj2combine)
					    (implies/combine
					       (implies/trans
						  (implies/nonlinear bimplies/tt)
						  (implies/true2empty))
					       (IMP v))
					    (implies/equiv equiv/commute)
					    (implies/equiv equiv/identity))
					 (implies/trans3
					    (implies/equiv equiv/commute)
					    (implies/combine
					       (implies/equiv EQV)
					       (implies/reflexive))
					    (implies/equiv
					       (equiv/symmetric equiv/associate))))
				      (implies/equiv equiv/associate)
				      (implies/combine (IMP2 v) implies/reflexive)
				      (implies/equiv (equiv/symmetric equiv/associate))
				      (implies/combine
					 (implies/equiv (equiv/symmetric equiv/one))
					 (implies/reflexive))))
				(transform/skolem)
				(transform/inside
				   ([r]
				      (transform/implies
					 (implies/trans
					    (implies/combine
					       (implies/equiv equiv/one)
					       (implies/reflexive))
					    (implies/equiv 
					       (equiv/symmetric equiv/associate)))))))
			     (letTyping/exists
				([r]
				   (letTyping/base null
				      (tWrite:typing _ _ (write (lit v) _ (lit v')) _))))
 			     (transform/trans %{ BC, PC, EC, Pi2, PF2 }%
				(transform/inside
				   ([r]
				      (transform/implies
					 (implies/trans10
					    (implies/combine
					       (implies/reflexive)
					       (implies/trans3
						  (implies/combine
						     (REM r)
						     (implies/combine
							(implies/reflexive)
							(implies/equiv
							   equiv/commute)))
						  (implies/equiv equiv/commute)
						  (implies/equiv equiv/identity)))
					    (implies/combine %{ BC, EC, PF2, Pi2 }%
					       (implies/reflexive)
					       (implies/equiv equiv/roll2))
					    (implies/equiv equiv/associate)
					    (implies/combine
					       (implies/trans3
						  (implies/combine
						     (implies/reflexive)
						     (DUP v'))
						  (implies/equiv equiv/associate)
						  (implies/combine
						     (implies/pack v')
						     (implies/reflexive)))
					       (implies/reflexive))
					    (implies/equiv  %{ PC, PF2, EC, Pi2 }%
					       (equiv/symmetric equiv/associate))
					    (implies/combine
					       (implies/reflexive)
					       (implies/equiv equiv/roll2))
					    (implies/equiv equiv/associate)
					    (implies/combine %{ WS, PF2, Pi2 }%
					       (implies/linear-modus-ponens)
					       (implies/reflexive))
					    (implies/equiv equiv/roll2)
					    (implies/combine
					       (implies/reflexive)
					       (implies/equiv (equiv/symmetric EQV)))))))
				(transform/rem-unused)))))))))
	(transform/rem-unused))
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P NTYPE1
     	_ (nulltp2perm/norm PM-LP1 nn2perm/yes) TYPE1 
     <- clsmap2predmap-implies-predmap-lookup CM2PM CM-LP _ PM-LP2
     <- predmap`lookup-deterministic PM-LP1 PM-LP2 predmap`eq/ nat`eq/ PEQ
     <- typing-preserves-eq nn2perm/yes PEQ TYPE1 TYPE1'
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P NTYPE2 _
	(nulltp2perm/norm PM-FLP1 NN2P1) TYPE2
     <- conversion-helper/write3 (nulltp2perm/norm PM-LP2 nn2perm/yes) TYPE2 ([r] TYPE3 r)
     <- writeshared-can-move-front OFL2P _ EQV
     <- lookup-fldperm-converse CM2PM PM-LP2 CM-LP FM-LP PM-FLP1 _ FNN2P _ IMP
     <- get-precise-exists-single FNN2P PM-FLP1 NN2P1 IMP2
     <- clspred-implies-empty (nulltp2perm/norm PM-FLP1 NN2P1) ([r] REM r)
     <- conversion-helper/write2 NN2P1 PM-FLP1 (nulltp2perm/norm PM-FLP1 NN2P1) DUP.

- : convert/args-ok CM2PM CM-CM CM-MM CM-L MM2W L2P nulltArgs/0 
     _ tArgs0 perm-output/args/0.

- : convert/args-ok
     CM2PM CM-CM CM-MM CM-L MM2W L2P (nulltArgs/+ ([o] NTYPA o) NTYP) _ 
     (tArgs1 (TYP) (letTyping/exists [v] (letTyping/base v (tArgs (TYPA v))))) 
     (perm-output/args/+ APO T2P)
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-L MM2W L2P NTYP _ T2P TYP 
     <- typing-implies-clsmap-nulltp CM-CM CM-MM CM-L NTYP CM-T
     <- ({o} convert/args-ok CM2PM CM-CM CM-MM (clsmap-oflist/+ CM-T CM-L) 
	   MM2W (oflist2perm/+ T2P L2P) (NTYPA o) _ (TYPA o) (APO o)).

%worlds (objvar) 
(convert/expr-ok _ _ _ _ _ _ _ _ _ _)
(convert/cond-ok _ _ _ _ _ _ _ _ _ _)
(convert/args-ok _ _ _ _ _ _ _ _ _ _).
%total (T1 T2 T3)
(convert/expr-ok _ _ _ _ _ _ T1 _ _ _)
(convert/cond-ok _ _ _ _ _ _ T2 _ _ _)
(convert/args-ok _ _ _ _ _ _ T3 _ _ _).


%theorem methtpmatch-implies-proctypematch* :
        forall* {CM} {MM} {PM} {MT} {W} {F} {OFL} {Pi} {Pi2}
        forall  {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-MT: clsmap-methtp CM MT}
                {CM2PM: clsmap2predmap CM PM}
		{CM-OFL: clsmap-oflist CM OFL}			       
		{MM2W: methmap2progtype PM CM MM W}			      
                {OFL2P: oflist2perm PM OFL Pi}
                {EQV: equiv Pi (sharedPerm , Pi2)}
                {MC: methtpmatch* CM MM OFL F MT}
        exists  {PT} {MT2PT: methtp2proctype* PM Pi2 MT PT}
                {PC: proctypematch W F PT}
        true.                

- : methtpmatch-implies-proctypematch* 
     CM-CM CM-MM _ CM2PM CM-OFL MM2W OFL2P EQV (methtpmatch*/base NTYP)
     %{=>}% _ (methtp2proctype*/base T2P) 
     (proctypematch/base
	(tTrans
	   (transform/implies
	      (implies/equiv (equiv/symmetric EQV)))
	   (letTyping/base null TYP)
	   (transform/inside [ret]
	      (transform/trans
		 (transform/implies
		    (implies/trans3
		       (implies/combine 
			  (implies/reflexive)
			  (implies/trans
			     (implies/equiv EQV)
			     (implies/equiv equiv/commute)))
		       (implies/equiv equiv/commute)
		       (implies/equiv (equiv/symmetric equiv/associate))))
		 (transform/drop)))))
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P NTYP _ T2P TYP.

- : methtpmatch-implies-proctypematch*
     CM-CM CM-MM (clsmap-methtp/arg ([o] (CM-MT o)) CM-T)
     CM2PM CM-OFL MM2W OFL2P EQV (methtpmatch*/args ([o] MC o)) %{=>}%
     _ (methtp2proctype*/arg ([o] MT2PT o) T2P) (proctypematch/arg ([o] PC o))
     <- clsmap-nulltp-implies-nulltp2perm CM2PM CM-T _ T2P
     <- ({o} methtpmatch-implies-proctypematch* 
	   CM-CM CM-MM (CM-MT o) CM2PM (clsmap-oflist/+ CM-T CM-OFL) MM2W 
	   (oflist2perm/+ T2P OFL2P)
	   (equiv/transitive
	      (equiv/combine (equiv/reflexive) EQV)
	      (equiv/roll2))
	   (MC o) _ (MT2PT o) (PC o)).
	   
%worlds (objvar) (methtpmatch-implies-proctypematch* _ _ _ _ _ _ _ _ _ _ _ _).
%total MC (methtpmatch-implies-proctypematch* _ _ _ _ _ _ _ _ MC _ _ _).


%theorem methtpmatch-implies-proctypematch :
        forall* {CM} {MM} {PM} {MT} {W} {F}
        forall  {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-MT: clsmap-methtp CM MT}
                {CM2PM: clsmap2predmap CM PM}
		{MM2W: methmap2progtype PM CM MM W}			      
                {MC: methtpmatch CM MM F MT}
        exists  {PT} {MT2PT: methtp2proctype PM MT PT}
                {PC: proctypematch W F PT}
        true.                

- : methtpmatch-implies-proctypematch 
     CM-CM CM-MM CM-MT CM2PM MM2W MC PT MT2PT PC
     <- methtpmatch-implies-proctypematch*
	CM-CM CM-MM CM-MT CM2PM clsmap-oflist/0 MM2W oflist2perm/0
	(equiv/symmetric equiv/identity) MC PT MT2PT PC.

%worlds () (methtpmatch-implies-proctypematch _ _ _ _ _ _ _ _ _).
%total  {} (methtpmatch-implies-proctypematch _ _ _ _ _ _ _ _ _).


%theorem nulltyping-sub :
        forall* {CM} {MM} {L} {E} {C} 
        forall  {NN} {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM L}
                {NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C NN))}
        exists  {NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C nn/may))}
        true.

- : nulltyping-sub nn/may _ _ _ NTYP NTYP.

- : nulltyping-sub nn/yes CM-CM CM-MM CM-OFL NTYP 
     (nulltSub NTYP (clsmap-nulltp/norm IN) (sub/oo nn`subtype/my))
     <- typing-implies-clsmap-nulltp
	CM-CM CM-MM CM-OFL NTYP (clsmap-nulltp/norm IN).

%worlds () (nulltyping-sub _ _ _ _ _ _).
%total  NN (nulltyping-sub NN _ _ _ _ _).


%abbrev set-in = [N][S] set`member S N.
%abbrev set-notin = [N][S] set`not-member S N.
%abbrev set-unit-union = [S1][N][S2] set`union S1 (set/+ N set/0) S2.
%abbrev set-unit-remove = [S1][N][S2] set`remove S1 (set/+ N set/0) S2.


%%% bijection between raw field permissions and set members

set-rawfldperm : set -> (object -> permission) -> type.

set-rawfldperm/0 : set-rawfldperm set/0 ([_] empty).

set-rawfldperm/+ 
   : set-rawfldperm S ([t] (unitperm (basic t F null)) , (B t))
      <- set-unit-union S1 F S
      <- set-notin F S1
      <- set-rawfldperm S1 B.


%%% bijection between assembled field permissions and set members

set-fldpred : predmap -> fldmap -> set -> (object -> permission) -> type.

set-fldpred/0 : set-fldpred _ _ set/0 ([_] empty).

set-fldpred/+ 
   : set-fldpred PM FM S ([t] ((W P t) , (R t)))
      <- fldmap`lookup FM F (nulltp/norm C NN)
      <- fldnn2perm F NN ([p][o] W p o)
      <- predmap`lookup PM C P
      <- set-unit-union S1 F S
      <- set-notin F S1
      <- set-fldpred PM FM S1 ([t] R t).


%%% relation between set of fields and expr in constructor
%%% it simply says all fields appeared in the expr must be
%%% in the set.

set-expr : set -> (object -> expr) -> type.

set-expr/0 : set-expr _ ([t] lit t).

set-expr/+
   : set-expr S ([t] (seq (write (lit t) F _)) (B t))
      <- set-in F S
      <- set-expr S B.


%%% property of nonnull set

nonnull-set : fldmap -> set -> type.

nonnull-set/0 : nonnull-set _ set/0.

nonnull-set/+ 
   : nonnull-set FM (set/+ F S)
      <- fldmap`lookup FM F (nulltp/norm _ nn/yes)
      <- set`shift F S S'
      <- nonnull-set FM S'.


%%% a fldmap is good if it doesn't contain null field

good-fldmap : fldmap -> type.

good-fldmap/0 : good-fldmap fldmap`map/0.

good-fldmap/+ : good-fldmap (fldmap`map/+ N (nulltp/norm C NN) M) <- good-fldmap M.


%theorem shift-preserves-good-fldmap :
        forall* {FM} {FM'} {N}
        forall  {GF: good-fldmap FM}
		{SH: fldmap`shift N FM FM'}
        exists  {GF: good-fldmap FM'}
        true.

- : shift-preserves-good-fldmap good-fldmap/0 fldmap`shift/0 good-fldmap/0.

- : shift-preserves-good-fldmap (good-fldmap/+ GF) SH (good-fldmap/+ GF).

%worlds () (shift-preserves-good-fldmap _ _ _).
%total  {} (shift-preserves-good-fldmap _ _ _).

%%% theorems about set-clspred

%theorem false-implies-set-clspred :
        forall* {PM} {FM} {S} {FP}
        forall  {F: void}
        exists  {S-FP: set-fldpred PM FM S ([t] FP t)}
        true.

%worlds () (false-implies-set-clspred _ _).
%total  {} (false-implies-set-clspred _ _).


%%% trivial theorem
%%% if the results from two lookups are different, then 
%%% these two lookups must be on different entries.

%theorem diff-lookup-implies-ne :
        forall* {FM} {N1} {N2} {C1} {C2}
        forall  {L1:fldmap`lookup FM N1 (nulltp/norm C1 nn/may)}
                {L2:fldmap`lookup FM N2 (nulltp/norm C2 nn/yes)}
        exists  {NE: nat`ne N1 N2}
        true.

- : diff-lookup-implies-ne (fldmap`lookup/= EQ) (fldmap`lookup/> _ P) (nat`ne/< GT')
     <- nat`plus-implies-gt P nat`eq/ GT
     <- nat`gt-respects-eq GT nat`eq/ EQ GT'.

- : diff-lookup-implies-ne (fldmap`lookup/> _ P) (fldmap`lookup/= EQ) (nat`ne/> GT')
     <- nat`plus-implies-gt P nat`eq/ GT
     <- nat`gt-respects-eq GT nat`eq/ EQ GT'.

- : diff-lookup-implies-ne (fldmap`lookup/> L1 P1) (fldmap`lookup/> L2 P2) PNE
     <- diff-lookup-implies-ne L1 L2 NE
     <- nat`succ-preserves-ne NE SNE
     <- nat`plus-right-preserves-ne* SNE P1 P2 PNE.
     
%worlds () (diff-lookup-implies-ne _ _ _).
%total L1 (diff-lookup-implies-ne L1 _ _).


%%% theorem about nonnull-set
%%% a maybenull field must NOT in a nonnull-set

%theorem no-maybenull-in-nonnull-set :
        forall* {FM} {S} {F} {C}
        forall  {NNS: nonnull-set FM S}
                {L: fldmap`lookup FM F (nulltp/norm C nn/may)}
        exists  {NM: set-notin F S}
        true.

- : no-maybenull-in-nonnull-set nonnull-set/0 _ set`not-member/0.

- : no-maybenull-in-nonnull-set (nonnull-set/+ NNS1 SH LN) LF F/S
     <- no-maybenull-in-nonnull-set NNS1 LF F/S1
     <- diff-lookup-implies-ne LF LN F!=N
     <- nat`ne-symmetric F!=N N!=F
     <- set`ne-implies-unit-map-not-member N!=F F/N
     <- set`can-construct-unit-union SH S1UN=S
     <- set`union-preserves-not-member* F/S1 F/N S1UN=S F/S.
	
%worlds () (no-maybenull-in-nonnull-set _ _ _).
%total NNS (no-maybenull-in-nonnull-set NNS _ _).


%%% after removing an element from a nonnull set, the result 
%%% should still preserve the property.

%theorem remove-preserves-nonnull-set :
        forall* {FM} {S} {S1} {F} 
        forall  {NNS: nonnull-set FM S}
                {RM: set-unit-remove S F S1}
        exists  {NNS: nonnull-set FM S1}
        true.

- : remove-preserves-nonnull-set nonnull-set/0 _ nonnull-set/0.

- : remove-preserves-nonnull-set 
     (nonnull-set/+ NNS2 _ _) (set`remove/= _ _ _) NNS2.
     
- : remove-preserves-nonnull-set
     (nonnull-set/+ NNS2 N<<S1=S2 FM-L) (set`remove/< S1/N0=S3 N0+1+N=F) 
     (nonnull-set/+ NNS4 N<<S3=S4 FM-L)
     <- nat`plus-swap-succ N0+1+N=F N0+N+1=F
     <- nat`plus-commutative N0+N+1=F N+1+N0=F
     <- set`shift-preserves-remove 
	S1/N0=S3 N<<S1=S2 (set`shift/+ N+1+N0=F) S4 N<<S3=S4 S2/F=S4
     <- remove-preserves-nonnull-set NNS2 S2/F=S4 NNS4.
       
- : remove-preserves-nonnull-set
     (nonnull-set/+ NNS2 N1<<S1=S2 LN1)
     (set`remove/> (set`shift/+ F+1+K=N2) KS1/0=KS1 K+1+F=N1) 
     (nonnull-set/+ NNS2 N2<<S1=S2 LN2)
     <- nat`plus-swap-succ K+1+F=N1 K+F+1=N1 
     <- nat`plus-commutative K+F+1=N1 F+1+K=N1
     <- nat`plus-deterministic F+1+K=N1 F+1+K=N2 nat`eq/ nat`eq/ N1=N2
     <- set`shift-respects-eq N1<<S1=S2 N1=N2 set`eq/ set`eq/ N2<<S1=S2
     <- fldmap`lookup-respects-eq LN1 fldmap`eq/ N1=N2 nulltp`eq/ LN2.

%worlds () (remove-preserves-nonnull-set _ _ _).
%total NNS (remove-preserves-nonnull-set NNS _ _).


%%% if a set is nonnull, then after putting in a nonnull-type field, it 
%%% should still be nonnull.

%theorem union-preserves-nonnull-set :
        forall* {FM} {S} {S1} {F} {C}
        forall  {NNS: nonnull-set FM S}
                {U: set`union S (set/+ F set/0) S1}
                {L: fldmap`lookup FM F (nulltp/norm C nn/yes)}
        exists  {NNS: nonnull-set FM S1}
        true.


- : union-preserves-nonnull-set 
     nonnull-set/0 set`union/L L
     (nonnull-set/+ nonnull-set/0 set`shift/0 L).

- : union-preserves-nonnull-set
     NNS (set`union/= _ _) _ NNS.

- : union-preserves-nonnull-set
     (nonnull-set/+ NNS2 N<<S1=S2 LN)
     (set`union/< S1UN0=S3 SN0+N=F) LF 
     (nonnull-set/+ NNS4 N<<S3=S4 LN)
     <- nat`plus-swap-succ SN0+N=F N0+SN=F
     <- nat`plus-commutative N0+SN=F SN+N0=F
     <- set`shift-total N<<S3=S4
     <- set`shift-preserves-union
	S1UN0=S3 N<<S1=S2 (set`shift/+ SN+N0=F) N<<S3=S4 S2UF=S4
     <- union-preserves-nonnull-set NNS2 S2UF=S4 LF NNS4.

- : union-preserves-nonnull-set 
     NNS (set`union/> set`union/R SN3+F=N) LF 
     (nonnull-set/+ NNS (set`shift/+ SF+N3=N) LF)
     <- nat`plus-swap-succ SN3+F=N N3+SF=N
     <- nat`plus-commutative N3+SF=N SF+N3=N. 

%worlds () (union-preserves-nonnull-set _ _ _ _).
%total NNS (union-preserves-nonnull-set NNS _ _ _).


%%% this theorem says we can use a bigger fldmap 
%%% and still preserve the relation

%theorem fldmap-shift-preserves-nonnull-set :
        forall* {FM} {FM'} {S} {F} {T}
        forall  {NNS: nonnull-set FM S}
                {SH: fldmap`shift F FM' FM}
        exists  {NNS: nonnull-set (fldmap`map/+ F T FM') S}
        true.

- : fldmap-shift-preserves-nonnull-set nonnull-set/0 _ nonnull-set/0.

- : fldmap-shift-preserves-nonnull-set (nonnull-set/+ NNS SH FMLN) F<<FM'=FM
     (nonnull-set/+ NNS' SH (fldmap`lookup/> FM'LN1 SN1+F=N))
     <- fldmap-shift-preserves-nonnull-set NNS F<<FM'=FM NNS'
     <- fldmap`shift-preserves-lookup-converse FMLN F<<FM'=FM _ SF+N1=N FM'LN1
     <- nat`plus-swap-succ SF+N1=N F+SN1=N
     <- nat`plus-commutative F+SN1=N SN1+F=N.

%worlds () (fldmap-shift-preserves-nonnull-set _ _ _).
%total NNS (fldmap-shift-preserves-nonnull-set NNS _ _).


%theorem filt-nnflds-implies-nonnull-set :
        forall* {FM} {S}
        forall  {FF: filt-nnflds FM S}
        exists  {NS: nonnull-set FM S}
        true.

- : filt-nnflds-implies-nonnull-set filt-nnflds/0 nonnull-set/0.

- : filt-nnflds-implies-nonnull-set
     (filt-nnflds/in SUF=S' FNN SH) NNS''
     <- filt-nnflds-implies-nonnull-set FNN NNS
     <- fldmap-shift-preserves-nonnull-set NNS SH NNS'
     <- union-preserves-nonnull-set NNS' SUF=S' (fldmap`lookup/= nat`eq/) NNS''.

- : filt-nnflds-implies-nonnull-set 
     (filt-nnflds/out FNNM'S F<<M'=M) NNS'
     <- filt-nnflds-implies-nonnull-set FNNM'S NNS
     <- fldmap-shift-preserves-nonnull-set NNS F<<M'=M NNS'.

%worlds () (filt-nnflds-implies-nonnull-set _ _).
%total FF (filt-nnflds-implies-nonnull-set FF _).



%%% theorems about set-fldpred


%theorem set-fldpred-imply :
        forall* {PM} {FM} {FP} {S} {F}
        forall  {S-FP: set-fldpred PM FM S ([t] FP t)} {F&S: set-in F S} 
        exists  {C} {NN} {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
                {W} {FNN2P: fldnn2perm F NN ([p][o] W p o)}
                {P} {PM-L: predmap`lookup PM C P}
                {RP} {TAS: {t} implies (FP t) ((W P t) , (RP t))}
                {S1} {S1-RP: set-fldpred PM FM S1 ([t] RP t)}
                {NM: set-notin F S1} {U: set-unit-union S1 F S} 
        true.

%theorem set-fldpred-imply/L :
        forall* {PM} {FM} {S} {F} {N} 
                {S1} {R} {D1} {P1} {NN1} {W1} 
        forall  {C} {CMP: nat`compare N F C}
                {S1-R: set-fldpred PM FM S1 ([t] R t)}
                {N/S1: set-notin N S1} 
                {S1UN=S: set-unit-union S1 N S}
                {F&S: set-in F S}
                {PM-L: predmap`lookup PM D1 P1}
                {FNN2P: fldnn2perm N NN1 ([p][o] W1 p o)}
                {FM-L: fldmap`lookup FM N (nulltp/norm D1 NN1)}
        exists  {D2} {NN2} {FM-L: fldmap`lookup FM F (nulltp/norm D2 NN2)}
                {W2} {FNN2P: fldnn2perm F NN2 ([p][o] W2 p o)}
                {P2} {PM-L: predmap`lookup PM D2 P2}
                {RP} {IMP: {t} implies ((W1 P1 t) , (R t)) ((W2 P2 t) , (RP t))}
                {S2} {S1-RP: set-fldpred PM FM S2 ([t] RP t)}
                {F/S2: set-notin F S2} {S2UF=S: set-unit-union S2 F S} 
        true.
       
- : set-fldpred-imply/L equal _
     S1-R N/S1 S1UN=S _ PM-L FNN2P FM-L %{=>}%
     _ _ FM-L _ FNN2P _ PM-L _ ([t] implies/reflexive)
     _ S1-R N/S1 S1UN=S.

- : set-fldpred-imply/L less CMP
     S1-R N/S1 S1UN=S F&S PM-L1 FNN2P1 FM-L1 %{=>}%
     _ _ FM-L2 _ FNN2P2 _ PM-L2 _
     ([t] implies/trans
	(implies/combine 
	   (implies/reflexive)
	   (IMP t))
	(implies/equiv equiv/roll2))
     S3 (set-fldpred/+ S2-RP N/S2 S2UN=S3 PM-L1 FNN2P1 FM-L1) F/S3 S3UF=S
     <- nat`less-implies-lt CMP F>N
     <- set`ne-implies-unit-map-not-member (nat`ne/< F>N) F/N
     <- set`not-member-union-right-preserves-lookup-converse F&S F/N S1UN=S F&S1
     <- set-fldpred-imply S1-R F&S1 %{=>}%
	_ _ FM-L2 _ FNN2P2 _ PM-L2 _ ([t] IMP t) _ S2-RP F/S2 S2UF=S1
     <- set`union-preserves-not-member-converse* N/S1 S2UF=S1 N/S2 _
     <- set`union-commutative S2UF=S1 FUS2=S1
     <- set`union-associative FUS2=S1 S1UN=S S3 S2UN=S3 FUS3=S
     <- set`union-commutative FUS3=S S3UF=S
     <- set`union-preserves-not-member* F/S2 F/N S2UN=S3 F/S3.

- : set-fldpred-imply/L greater CMP
     S1-R N/S1 S1UN=S F&S PM-L1 FNN2P1 FM-L1 %{=>}%
     _ _ FM-L2 _ FNN2P2 _ PM-L2 _
     ([t] implies/trans
	(implies/combine 
	   (implies/reflexive)
	   (IMP t))
	(implies/equiv equiv/roll2))
     S3 (set-fldpred/+ S2-RP N/S2 S2UN=S3 PM-L1 FNN2P1 FM-L1) F/S3 S3UF=S
     <- nat`greater-implies-gt CMP N>F
     <- set`ne-implies-unit-map-not-member (nat`ne/> N>F) F/N
     <- set`not-member-union-right-preserves-lookup-converse F&S F/N S1UN=S F&S1
     <- set-fldpred-imply S1-R F&S1 %{=>}%
	_ _ FM-L2 _ FNN2P2 _ PM-L2 _ ([t] IMP t) _ S2-RP F/S2 S2UF=S1
     <- set`union-preserves-not-member-converse* N/S1 S2UF=S1 N/S2 _
     <- set`union-commutative S2UF=S1 FUS2=S1
     <- set`union-associative FUS2=S1 S1UN=S S3 S2UN=S3 FUS3=S
     <- set`union-commutative FUS3=S S3UF=S
     <- set`union-preserves-not-member* F/S2 F/N S2UN=S3 F/S3.

- : set-fldpred-imply (set-fldpred/+ S1-R N/S1 S1UN=S PM-L1 FNN2P1 FM-L1) F&S %{=>}%
     _ _ FM-L2 _ FNN2P2 _ PM-L2 _ ([t] IMP t) S2 S2-RP F/S2 S2UF=S
     <- nat`compare-total CMP
     <- set-fldpred-imply/L _ CMP S1-R N/S1 S1UN=S F&S PM-L1 FNN2P1 FM-L1 %{=>}%
	_ _ FM-L2 _ FNN2P2 _ PM-L2 _ ([t] IMP t) S2 S2-RP F/S2 S2UF=S.

%worlds () 
(set-fldpred-imply _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
(set-fldpred-imply/L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).

%total (SF1 SF2)
(set-fldpred-imply SF1 _ _ _ _ _ _ _ _ _ _ _ _ _ _)
(set-fldpred-imply/L _ _ SF2 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).


%%% similar theorem as set-rawfldperm-reorder, except the relation
%%% is between set and sequence of packed field permissions

%theorem set-fldpred-reorder :
        forall* {PM} {FM} {FP} {S} {F}  
        forall  {S-FP: set-fldpred PM FM S ([t] FP t)} {IN: set-in F S}
        exists  {RP} 
                {TAS: {r}{t} transform 
		       (output/expr r (FP t))
		       (output/exists [o] (output/expr r
		       	   ((unitperm (basic t F o)) , (RP t))))}
                {S1} {S1-RP: set-fldpred PM FM S1 ([t] RP t)}
                {NM: set-notin F S1} {U: set-unit-union S1 F S} 
        true.

%theorem set-fldpred-reorder/L :
        forall* {PM} {FM} {S} {F} 
                {S1} {N} {R} {W} {P} {D} {NN} 
        forall  {C} {CMP: nat`compare N F C}
                {S1-R: set-fldpred PM FM S1 ([t] R t)}
                {N/S1: set-notin N S1}
                {U: set-unit-union S1 N S}
                {IN: set-in F S}
                {PM-L: predmap`lookup PM D P}
                {FNN2P: fldnn2perm N NN ([p][o] W p o)}
                {FM-L: fldmap`lookup FM N (nulltp/norm D NN)}
        exists  {RP}
                {TAS: {r}{t} transform
		       (output/expr r ((W P t) , (R t)))
		       (output/exists [o] 
			  (output/expr r ((unitperm (basic t F o)) , (RP t))))}
                {S2} {S2-RP: set-fldpred PM FM S2 ([t] RP t)}
                {F/S2: set-notin F S2} {U: set-unit-union S2 F S}
        true.

- : set-fldpred-reorder/L equal
     _ S1-R N/S1 S1UN=S _ PM-L fldnn2perm/yes _ _ 
     ([r][t] transform/trans3
	(transform/implies
	   (implies/combine 
	      (implies/equiv (equiv/symmetric equiv/one))
	      (implies/reflexive)))
	(transform/skolem)
	(transform/inside [r]
	   (transform/implies
	      (implies/combine
		 (implies/trans
		    (implies/equiv equiv/one)
		    (implies/trans
		       (implies/combine
			  (implies/reflexive)
			  (implies/trans
			     (implies/nonlinear (bimplies/tt))
			     (implies/true2empty)))
		       (implies/equiv equiv/identity)))
		 (implies/reflexive)))))
     _ S1-R N/S1 S1UN=S.

- : set-fldpred-reorder/L equal 
     _ S1-R N/S1 S1UN=S _ _ fldnn2perm/may _ _ 
     ([r][t] transform/trans3
	(transform/implies
	   (implies/combine 
	      (implies/equiv (equiv/symmetric equiv/one))
	      (implies/reflexive)))
	(transform/skolem)
	(transform/inside [r]
	   (transform/implies
	      (implies/combine
		 (implies/trans
		    (implies/equiv equiv/one)
		    (implies/trans
		       (implies/combine
			  (implies/reflexive)
			  (implies/trans
			     (implies/cond-inner
				(bimplies/reflexive)
				(bimplies/reflexive)
				(implies/reflexive)
				(implies/trans
				   (implies/nonlinear bimplies/tt)
				   (implies/true2empty)))
			     (implies/cond-equal)))
		       (implies/equiv equiv/identity)))
		 (implies/reflexive)))))
     _ S1-R N/S1 S1UN=S.

- : set-fldpred-reorder/L less 
     C S1-R N/S1 S1UN=S F&S PM-L FNN2P FM-L _ 
     ([r][t] transform/trans
	(TAS' r t)
	(transform/inside [_] 
	   (transform/implies
	      (implies/equiv equiv/roll2))))
     S3 (set-fldpred/+ S2-RP N/S2 S2UN=S3 PM-L (FNN2P:fldnn2perm N NN W) FM-L) F/S3 S3UF=S
     <- nat`less-implies-lt C F>N
     <- set`ne-implies-unit-map-not-member (nat`ne/< F>N) F/N
     <- set`not-member-union-right-preserves-lookup-converse F&S F/N S1UN=S F&S1
     <- set-fldpred-reorder S1-R F&S1 RP ([r][t] TAS r t) E2 S2-RP F/S2 S2UF=S1
     <- ({r}{t} transform-commutes-envadd*
	   (TAS r t) envadd/expr (envadd/exists [o] envadd/expr) (TAS' r t))
     <- set`union-preserves-not-member-converse* N/S1 S2UF=S1 N/S2 _
     <- set`union-commutative S2UF=S1 FUS2=S1
     <- set`union-associative FUS2=S1 S1UN=S S3 S2UN=S3 FUS3=S
     <- set`union-commutative FUS3=S S3UF=S
     <- set`union-preserves-not-member* F/S2 F/N S2UN=S3 F/S3.

- : set-fldpred-reorder/L greater 
     C S1-R N/S1 S1UN=S F&S PM-L FNN2P FM-L _ 
     ([r][t] transform/trans
	(TAS' r t)
	(transform/inside [_] 
	   (transform/implies
	      (implies/equiv equiv/roll2))))
     S3 (set-fldpred/+ S2-RP N/S2 S2UN=S3 PM-L FNN2P FM-L) F/S3 S3UF=S
     <- nat`greater-implies-gt C N>F
     <- set`ne-implies-unit-map-not-member (nat`ne/> N>F) F/N
     <- set`not-member-union-right-preserves-lookup-converse F&S F/N S1UN=S F&S1
     <- set-fldpred-reorder S1-R F&S1 RP ([r][t] TAS r t) _ S2-RP F/S2 S2UF=S1
     <- ({r}{t} transform-commutes-envadd*
	   (TAS r t) envadd/expr (envadd/exists [_] envadd/expr) (TAS' r t))
     <- set`union-preserves-not-member-converse* N/S1 S2UF=S1 N/S2 _
     <- set`union-commutative S2UF=S1 FUS2=S1
     <- set`union-associative FUS2=S1 S1UN=S S3 S2UN=S3 FUS3=S
     <- set`union-commutative FUS3=S S3UF=S
     <- set`union-preserves-not-member* F/S2 F/N S2UN=S3 F/S3.

- : set-fldpred-reorder (set-fldpred/+ S1-R N/S1 S1UN=S PM-L FNN2P FM-L) IN
     RP ([r][t] TAS r t) S2 S2-RP F/S2 S2UF=S
     <- nat`compare-total CMP
     <- set-fldpred-reorder/L _ CMP S1-R N/S1 S1UN=S IN PM-L FNN2P FM-L
	RP ([r][t] TAS r t) S2 S2-RP F/S2 S2UF=S.

%worlds () 
(set-fldpred-reorder _ _ _ _ _ _ _ _)
(set-fldpred-reorder/L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).

%total (SF1 SF2)
(set-fldpred-reorder SF1 _ _ _ _ _ _ _)
(set-fldpred-reorder/L _ _ SF2 _ _ _ _ _ _ _ _ _ _ _ _).



% %theorem fldmap2conj-reorder :
%         forall* {CM} {PM} {FM} {G} 
%         forall  {F2J: fldmap2conj CM PM FM ([t] G t) PM}
%                 {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
%         exists  {PF} {FNN2P: fldnn2perm F NN ([p][r] PF p r)}
%                 {CP} {PM-L: predmap`lookup PM C CP}
%                 {FM1} {
%                 {H} {{IMP: {t} bimplies (G t) (conj (nested (PF CP t) null own) (H t))}
%         true.



%theorem set-fldpred-implies-fldmap2conj/L :
        forall* {PM} {FM} {F} {S} {FP} {C} {NN}
        forall  {SF: set-fldpred PM FM S ([t] FP t)}
                {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
                {S-MB: set-in F S}
        exists  {S'} {NM: set-notin F S'} {U: set-unit-union S' F S}
                {R} {SR: set-fldpred PM FM S' ([t] R t)}
                {W} {FNN2P :fldnn2perm F NN ([p][o] W p o)}
                {P} {L: predmap`lookup PM C P}
                {IMP: {t} implies (FP t) ((W P t) , (R t))}
        true.

- : set-fldpred-implies-fldmap2conj/L S-FP FM-L S-MB
     _ F/S1 S1UF=S _ S1-RP _ FNN2P' _ PM-L' ([t] IMP t)
     <- set-fldpred-imply S-FP S-MB %{=>}%
	_ _ FM-L' _ FNN2P _ PM-L _ ([t] IMP t) _ S1-RP F/S1 S1UF=S
     <- fldmap`lookup-deterministic FM-L' FM-L fldmap`eq/ nat`eq/ NTEQ
     <- nulltp-eq-implies-eq NTEQ NEQ NNEQ
     <- fldnn2perm-respects-eq FNN2P nat`eq/ NNEQ ([_][_] permission`eq/) FNN2P'
     <- predmap`lookup-respects-eq PM-L predmap`eq/ NEQ nullpred`eq/ PM-L'.

%worlds () (set-fldpred-implies-fldmap2conj/L _ _ _ _ _ _ _ _ _ _ _ _ _).
%total  {} (set-fldpred-implies-fldmap2conj/L _ _ _ _ _ _ _ _ _ _ _ _ _).


%theorem set-fldpred-imply :
        forall* {PM} {FM} {FP} {S} {F}
        forall  {S-FP: set-fldpred PM FM S ([t] FP t)} {F&S: set-in F S} 
        exists  {C} {NN} {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
                {W} {FNN2P: fldnn2perm F NN ([p][o] W p o)}
                {P} {PM-L: predmap`lookup PM C P}
                {RP} {TAS: {t} implies (FP t) ((W P t) , (RP t))}
                {S1} {S1-RP: set-fldpred PM FM S1 ([t] RP t)}
                {NM: set-notin F S1} {U: set-unit-union S1 F S} 
        true.

%theorem set-fldpred-implies-fldmap2conj : 
        forall* {CM} {PM} {FM} {S} {FP} 
        forall  {N} {SZ: fldmap`size FM N} 
                {GD: good-fldmap FM}
                {DM: fldmap`domain FM S}
		{SF: set-fldpred PM FM S ([t] FP t)}
        exists  {G} {F2C: fldmap2conj CM PM FM ([t] G t) PM}
                {TAS: {t} transform
		       (output/expr t (FP t)) 
		       (output/expr t (unitperm (nonlinear (G t))))}
        true.

- : set-fldpred-implies-fldmap2conj z fldmap`size/0 _
     fldmap`domain/0 set-fldpred/0 %{=>}% 
     _ fldmap2conj/0 ([_] transform/implies (implies/empty2true)).

- : set-fldpred-implies-fldmap2conj (s N) (fldmap`size/+ SZ) (good-fldmap/+ GF1)
     (fldmap`domain/+ DM-FM1) SF %{=>}%
     _ (fldmap2conj/norm/in F2C FNN2P F<<FM1=FM1' PM-L) 
     ([t] transform/trans
	(transform/implies (IMP t))
	(transform/trans3
	   (TAS' t)
	   (transform/nest)
	   (transform/implies
	      (implies/combine2conj))))
     <- fldmap`shift-total F<<FM1=FM1'
     <- fldmap`shift-preserves-size SZ F<<FM1=FM1' SZ'
     <- set-fldpred-implies-fldmap2conj/L 
	SF (fldmap`lookup/= nat`eq/) (set`lookup/= nat`eq/) _ _ 
	(set`union/> _ SN3+F=N1) _ S1'-R _ FNN2P _ PM-L ([t] IMP t)
     <- nat`plus-swap-succ SN3+F=N1 N3+SF=N1
     <- nat`plus-commutative N3+SF=N1 SF+N3=N1
     <- fldmap`shift-preserves-domain* DM-FM1 F<<FM1=FM1' (set`shift/+ SF+N3=N1) DM-FM1'
     <- shift-preserves-good-fldmap GF1 F<<FM1=FM1' GF1'
     <- set-fldpred-implies-fldmap2conj N SZ' GF1' DM-FM1' S1'-R _ F2C ([t] TAS t)
     <- ({t} transform-commutes-envadd* (TAS t) envadd/expr envadd/expr (TAS' t)).
	   
%worlds () (set-fldpred-implies-fldmap2conj _ _ _ _ _ _ _ _).
%total  (N) (set-fldpred-implies-fldmap2conj N _ _ _ _ _ _ _).

     <- set-fldpred-implies-fldmap2conj/L SF
	_ F<<S1=S1'  _ S1'-R _ _ _ _ FNN2P _ PM-L ([t] IMP t)

%%% this theorem says given a bijection between a set and a sequence of bare
%%% field permissions, for any given element in the set, we can reorder the 
%%% permissions and move the corresponding field permission to the front.
%%% the rest of set and rest permission still preserve the bijection property.

%theorem set-rawfldperm-reorder :
        forall* {S} {FP} {F} 
        forall  {S-RP: set-rawfldperm S ([t] FP t)} {IN: set-in F S}
        exists  {R} {IMP: {t} implies (FP t) ((unitperm (basic t F null)) , (R t))}
                {S1} {S1-R: set-rawfldperm S1 ([t] R t)}
                {NM: set-notin F S1} {U: set-unit-union S1 F S}		
	true.			   

%theorem set-rawfldperm-reorder/L :
        forall* {S} {S1} {F} {N} {R} 
        forall  {C} {CMP: nat`compare N F C}
                {S1-R: set-rawfldperm S1 ([t] R t)}
                {N/S1: set-notin N S1}
                {U: set-unit-union S1 N S}
                {IN: set-in F S}
        exists  {RP}
                {IMP: {t} implies ((unitperm (basic t N null)) , (R t))
		       ((unitperm (basic t F null)) , (RP t))}
                {S2} {S2-RP: set-rawfldperm S2 ([t] RP t)}
		{F/S2: set-notin F S2} {U: set-unit-union S2 F S}
	true.			     
		       
- : set-rawfldperm-reorder/L equal
     _ S1-R N/S1 S1UN=S _ _ ([_] implies/reflexive) _ S1-R N/S1 S1UN=S.

- : set-rawfldperm-reorder/L less
     C S1-R N/S1 S1UN=S F&S _ 
     ([t] implies/trans
	(implies/combine
	   (implies/reflexive)
	   (IMP t))
	(implies/equiv equiv/roll2))
     S3 (set-rawfldperm/+ S2-RP N/S2 S2UN=S3) F/S3 S3UF=S
     <- nat`less-implies-lt C F>N
     <- set`ne-implies-unit-map-not-member (nat`ne/< F>N) F/N
     <- set`not-member-union-right-preserves-lookup-converse F&S F/N S1UN=S F&S1
     <- set-rawfldperm-reorder S1-R F&S1 RP ([t] IMP t) S2 S2-RP F/S2 S2UF=S1
     <- set`union-preserves-not-member-converse* N/S1 S2UF=S1 N/S2 _
     <- set`union-commutative S2UF=S1 FUS2=S1
     <- set`union-associative FUS2=S1 S1UN=S S3 S2UN=S3 FUS3=S
     <- set`union-commutative FUS3=S S3UF=S
     <- set`union-preserves-not-member* F/S2 F/N S2UN=S3 F/S3.

- : set-rawfldperm-reorder/L greater
     C S1-R N/S1 S1UN=S F&S _ 
     ([t] implies/trans
	(implies/combine
	   (implies/reflexive)
	   (IMP t))
	(implies/equiv equiv/roll2))
     S3 (set-rawfldperm/+ S2-RP N/S2 S2UN=S3) F/S3 S3UF=S
     <- nat`greater-implies-gt C N>F
     <- set`ne-implies-unit-map-not-member (nat`ne/> N>F) F/N
     <- set`not-member-union-right-preserves-lookup-converse F&S F/N S1UN=S F&S1
     <- set-rawfldperm-reorder S1-R F&S1 RP ([t] IMP t) S2 S2-RP F/S2 S2UF=S1
     <- set`union-preserves-not-member-converse* N/S1 S2UF=S1 N/S2 _
     <- set`union-commutative S2UF=S1 FUS2=S1
     <- set`union-associative FUS2=S1 S1UN=S S3 S2UN=S3 FUS3=S
     <- set`union-commutative FUS3=S S3UF=S
     <- set`union-preserves-not-member* F/S2 F/N S2UN=S3 F/S3.

- : set-rawfldperm-reorder
     (set-rawfldperm/+ S1-R N/S1 S1UN=S) F&S RP ([t] IMP t) S2 S2-RP F/S2 S2UF=S
     <- nat`compare-total CMP
     <- set-rawfldperm-reorder/L _ CMP S1-R N/S1 S1UN=S F&S RP IMP S2 S2-RP F/S2 S2UF=S.


%worlds ()
(set-rawfldperm-reorder _ _ _ _ _ _ _ _)
(set-rawfldperm-reorder/L _ _ _ _ _ _ _ _ _ _ _ _).

%total (SP1 SP2)
(set-rawfldperm-reorder SP1 _ _ _ _ _ _ _)
(set-rawfldperm-reorder/L _ _ SP2 _ _ _ _ _ _ _ _ _).



%%% this theorem should be put in typing.elf

%theorem constyping-respects-eq :
        forall* {CM} {MM} {FM} {S1} {S2} {L} {E}
        forall  {CTYP: constyping CM MM FM S1 L ([t] E t)}
                {EQ: set`eq S1 S2}
        exists  {CTYP: constyping CM MM FM S2 L ([t] E t)}
        true.

- : constyping-respects-eq CTYP set`eq/ CTYP.

%worlds () (constyping-respects-eq _ _ _).
%total  {} (constyping-respects-eq _ _ _).


%%% R - bare field permissions
%%% Q - assembled field permissions

%theorem constyping-implies-typing/L :
        forall* {PM} {CM} {MM} {FM} {E} {W}
                {S} {S1} {S2} {L} {Pi} {R0} {Q0}
        forall  {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM L}
                {CM2PM: clsmap2predmap CM PM}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM L Pi}
                {CTYP: constyping CM MM FM S1 L ([t] E t)}
                {NNS: nonnull-set FM S1}
                {S/S1=S2: set`remove S S1 S2}
                {S1US2=S: set`union S1 S2 S}
                {S-E: set-expr S E}
		{S1-R0: set-rawfldperm S1 R0}			
                {S2-Q0: set-fldpred PM FM S2 Q0}
        exists  {Q1} 
                {TYP: {t} typing W ((R0 t) , ((Q0 t) , Pi)) (E t) 
		       (output/expr t ((Q1 t) , Pi))}
                {S-Q1: set-fldpred PM FM S Q1}
        true.

%theorem constyping-implies-typing/LMB :
        forall* {PM} {CM} {MM} {FM} {E} {W} {B} {C} {NN}
                {S} {S1} {S2} {L} {Pi} {R0} {Q0} {F} {S3}
        forall  {G} {MB?: set`member? S1 F G}
                {RM: set-unit-remove S1 F S3}
                {F&S: set`member S F}
                {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM L}
                {CM2PM: clsmap2predmap CM PM}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM L Pi}
                {CTYP: constyping CM MM FM S3 L ([t] B t)}
                {NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C NN))}
                {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
                {NNS1: nonnull-set FM S1}
                {S/S1=S2: set`remove S S1 S2}
                {S1US2=S: set`union S1 S2 S}
                {S-B: set-expr S B}
		{S1-R0: set-rawfldperm S1 R0}			
                {S2-Q0: set-fldpred PM FM S2 Q0}
        exists  {Q1} 
                {TYP: {t} typing W ((R0 t) , ((Q0 t) , Pi))
		       ((seq (write (lit t) F E) (B t)))
		       (output/expr t ((Q1 t) , Pi))}
                {S-Q1: set-fldpred PM FM S Q1}
        true.

%theorem constyping-implies-typing/LL :
        forall* {PM} {CM} {MM} {FM} {E} {W} {B} {F} {S3}
                {S} {S1} {S2} {L} {Pi} {R0} {Q0} {C} {NN}
        forall  {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM L}
                {CM2PM: clsmap2predmap CM PM}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM L Pi}
                {CTYP: constyping CM MM FM S3 L ([t] B t)}
		{NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C NN))}
                {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
                {NNS1: nonnull-set FM S1}
                {F&S1: set-in F S1}
                {RM: set-unit-remove S1 F S3}
                {S/S1=S2: set`remove S S1 S2}
                {S1US2=S: set`union S1 S2 S}
                {S-B: set-expr S B}
		{S1-R0: set-rawfldperm S1 R0}			
                {S2-Q0: set-fldpred PM FM S2 Q0}
        exists  {Q1} 
                {TYP: {t} typing W ((R0 t) , ((Q0 t) , Pi)) 
		       (seq (write (lit t) F E) (B t)) 
		       (output/expr t ((Q1 t) , Pi))}
                {S-Q1: set-fldpred PM FM S Q1}
        true.

%theorem constyping-implies-typing/LR :
        forall* {PM} {CM} {MM} {FM} {E} {W} {B} {F}
                {S} {S1} {S2} {L} {Pi} {R0} {Q0} {C} {NN}
        forall  {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM-OFL: clsmap-oflist CM L}
                {CM2PM: clsmap2predmap CM PM}
                {MM2W: methmap2progtype PM CM MM W}
                {OFL2P: oflist2perm PM L Pi}
                {CTYP: constyping CM MM FM S1 L ([t] B t)}
		{NTYP: nullTyping CM MM L E (result/expr (nulltp/norm C NN))}			 
                {FM-L: fldmap`lookup FM F (nulltp/norm C NN)}
                {NNS: nonnull-set FM S1}
                {F&S2: set-in F S2}
                {S/S1=S2: set`remove S S1 S2}
                {S1US2=S: set`union S1 S2 S}
                {S-B: set-expr S B}
		{S1-R0: set-rawfldperm S1 R0}			
                {S2-Q0: set-fldpred PM FM S2 Q0}
        exists  {Q1} 
                {TYP: {t} typing W ((R0 t) , ((Q0 t) , Pi)) 
		       (seq (write (lit t) F E) (B t)) 
		       (output/expr t ((Q1 t) , Pi))}
                {S-Q1: set-fldpred PM FM S Q1}
        true.

- : constyping-implies-typing/L 
     _ _ _ _ _ _ constyping/0 _ _ _
     set-expr/0 set-rawfldperm/0 S-Q _ 
     ([_] tTrans2
	(tObjLoc)
	(transform/implies
	   (implies/equiv
	      (equiv/transitive
		 (equiv/commute) 
		 (equiv/identity))))) S-Q.

- : constyping-implies-typing/L 
     CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P (constyping/mn CTYP NTYP FM-L)
     NNS1 S/S1=S2 S1US2=S (set-expr/+ S-B F&S) S1-R0 S2-Q0 Q1 TYP S-Q1
     <- nulltyping-sub _ CM-CM CM-MM CM-OFL NTYP MNTYP
     <- no-maybenull-in-nonnull-set NNS1 FM-L F/S1
     <- set`not-member-union-left-preserves-lookup-converse F/S1 F&S S1US2=S F&S2
     <- constyping-implies-typing/LR 
	CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP MNTYP FM-L 
	NNS1 F&S2 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 Q1 TYP S-Q1.

- : constyping-implies-typing/L 
     CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P (constyping/nn CTYP NTYP S1/F=S3 FM-L)
     NNS1 S/S1=S2 S1US2=S (set-expr/+ S-B F&S) S1-R0 S2-Q0 Q1 TYP S-Q1
     <- set`member?-total MB?
     <- constyping-implies-typing/LMB _ MB? S1/F=S3 
	F&S CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P
	CTYP NTYP FM-L NNS1 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 Q1 TYP S-Q1.

- : constyping-implies-typing/LR
     CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P 
     CTYP NTYP FM-L NNS F&S2 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 _ 
     ([t] tTrans2
	(tLet
	   (tWrite2
	      (tTrans
		 (transform/implies
		    (implies/equiv equiv/associate))
		 (letTyping/base null (TYPE' t))
		 (transform/inside [r]
		    (transform/trans3
		       (transform/implies
			  (implies/trans2
			     (implies/combine
				(implies/equiv equiv/commute)
				(implies/reflexive))
			     (implies/equiv
				(equiv/transitive
				   (equiv/symmetric equiv/associate)
				   (equiv/commute)))))
		       (TRANS' r t)
		       (transform/inside [o]
			  (transform/implies
			     (implies/equiv
				(equiv/transitive
				   (equiv/commute)
				   (equiv/symmetric equiv/associate))))))))
	      (letTyping/exists [r]
		 (letTyping/exists [o]
		    (letTyping/base r
		       (tTrans2
			  (tWrite:typing _ _ (write (lit t) _ (lit r)) _)
			  (transform/implies
			     (implies/trans5
				(implies/combine
				   (implies/reflexive)
				   (implies/equiv equiv/roll3))
				(implies/equiv equiv/associate)
				(implies/combine
				   (IMP r t)
				   (implies/reflexive))
				(implies/equiv equiv/associate)
				(implies/equiv equiv/roll2))))))))
	   (letTyping/exists [r]
	      (letTyping/exists [o]
		 (letTyping/base r (TYPB t)))))
	(transform/trans
	   (transform/rem-unused)
	   (transform/rem-unused)))
     S-Q1
     <- set-fldpred-reorder S2-Q0 F&S2 RP ([r][t] TRANS r t) S3 S3-RP F/S3 S3UF=S2
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P NTYP
	_ (nulltp2perm/norm PM-L NN2P) TYPE
     <- nn2perm-implies-fldnn2perm NN2P PM-L _ FNN2P ([r][t] IMP r t)
     <- ({t} typing-frame* TYPE (envadd/exists ([r] envadd/expr)) (TYPE' t))
     <- constyping-implies-typing/L CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP
	NNS S/S1=S2 S1US2=S S-B S1-R0
	(set-fldpred/+ S3-RP F/S3 S3UF=S2 PM-L FNN2P FM-L) _ TYPB S-Q1
     <- ({r}{t} transform-commutes-envadd*
	   (TRANS r t) envadd/expr (envadd/exists [_] envadd/expr) (TRANS' r t)).

E : constyping-implies-typing/LL
     CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP NTYP FM-L
     NNS1 F&S1 S1/F=S3' S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 _ 
     ([t] tTrans2
	(tLet 
	   (tWrite2
	      (tTrans
		 (transform/implies
		    (implies/equiv equiv/associate))
		 (letTyping/base null (TYPE' t))
		 (transform/inside [r]
		    (transform/implies
		       (implies/trans3
			  (implies/equiv 
			     (equiv/symmetric equiv/associate))
			  (implies/combine
			     (IMP t) (implies/reflexive))
			  (implies/equiv 
			     (equiv/symmetric equiv/associate))))))
	      (letTyping/exists [r]
		 (letTyping/base r
		    (tTrans2
		       (tWrite:typing _ _ (write (lit t) _ (lit r)) _)
		       (transform/implies
			  (implies/trans5
			     (implies/combine
				(implies/reflexive)
				(implies/equiv equiv/roll3))
			     (implies/equiv equiv/associate)
			     (implies/combine
				(IMP2 r t)
				(implies/reflexive))
			     (implies/equiv equiv/roll2)
			     (implies/combine
				(implies/reflexive)
				(implies/equiv equiv/associate))))))))
	   (letTyping/exists [r]
	      (letTyping/base r (TYPB t))))
	(transform/rem-unused)) S-Q1
     <- set-rawfldperm-reorder S1-R0 F&S1 RP ([t] IMP t) S3 S3-RP F/S3 S3UF=S1
     <- convert/expr-ok CM2PM CM-CM CM-MM CM-OFL MM2W OFL2P NTYP 
	_ (nulltp2perm/norm PM-L NNTP) TYPE
     <- nn2perm-implies-fldnn2perm NNTP PM-L _ FNN2P ([r][t] IMP2 r t)
     <- ({t} typing-frame* TYPE (envadd/exists ([r] envadd/expr)) (TYPE' t))
     <- set`remove-implies-disjoint S/S1=S2 S1^S2
     <- set`disjoint-lookup-implies-not-member F&S1 S1^S2 F/S2
     <- set`union-associative S3UF=S1 S1US2=S S4 FUS2=S4 S3US4=S
     <- set`union-commutative FUS2=S4 S2UF=S4
     <- set`union-commutative S3UF=S1 FUS3=S1
     <- set`union-implies-leq S1US2=S S1<=S S2<=S
     <- set`union-implies-leq S3UF=S1 S3<=S1 F<=S1
     <- set`union-implies-leq S2UF=S4 S2<=S4 F<=S4
     <- set`leq-transitive F<=S1 S1<=S F<=S
     <- set`union-is-lub S2UF=S4 S2<=S F<=S S4<=S
     <- set`not-member-implies-unit-disjoint F/S3 S3^F
     <- set`leq-reflexive _ S2<=S2
     <- set`disjoint-respects-geq S1^S2 S3<=S1 S2<=S2 S3^S2
     <- set`disjoint-symmetric S3^F F^S3
     <- set`disjoint-symmetric S3^S2 S2^S3
     <- set`union-preserves-disjoint* F^S3 S2^S3 FUS2=S4 S4^S3
     <- set`disjoint-symmetric S4^S3 S3^S4
     <- set`leq-reflexive _ S<=S
     <- set`leq-reflexive _ S1<=S1
     <- set`remove-characterization S4<=S S3^S4 S3US4=S S<=S S/S3=S4
     <- set`remove-characterization S3<=S1 F^S3 FUS3=S1 S1<=S1 S1/F=S3
     <- set`remove-deterministic S1/F=S3' S1/F=S3 set`eq/ set`eq/ S3'=S3
     <- constyping-respects-eq CTYP S3'=S3 CTYP'
     <- remove-preserves-nonnull-set NNS1 S1/F=S3 NNS3
     <- constyping-implies-typing/L CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP'
	NNS3 S/S3=S4 S3US4=S S-B S3-RP 
	(set-fldpred/+ S2-Q0 F/S2 S2UF=S4 PM-L FNN2P FM-L) _ TYPB S-Q1.

- : constyping-implies-typing/LMB false OUT S1/F=S3 F&S 
     CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP NTYP FM-L
     NNS1 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 Q1 TYP S-Q1
     <- set`out-implies-not-member OUT F/S1
     <- set`not-member-implies-unit-disjoint F/S1 S1^F
     <- set`disjoint-implies-remove-nothing S1^F S1/F=S1
     <- set`remove-deterministic S1/F=S3 S1/F=S1 set`eq/ set`eq/ S3=S1
     <- constyping-respects-eq CTYP S3=S1 CTYP'
     <- set`not-member-union-left-preserves-lookup-converse F/S1 F&S S1US2=S F&S2
     <- constyping-implies-typing/LR 
	CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP' NTYP FM-L 
	NNS1 F&S2 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 Q1 TYP S-Q1.

- : constyping-implies-typing/LMB true IN S1/F=S3 _
     CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP NTYP FM-L 
     NNS1 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 Q1 TYP S-Q1
     <- set`in-implies-member IN _ F&S1
     <- constyping-implies-typing/LL
	CM-CM CM-MM CM-OFL CM2PM MM2W OFL2P CTYP NTYP FM-L 
	NNS1 F&S1 S1/F=S3 S/S1=S2 S1US2=S S-B S1-R0 S2-Q0 Q1 TYP S-Q1.

%worlds () 
(constyping-implies-typing/L _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
(constyping-implies-typing/LMB _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
(constyping-implies-typing/LL _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
(constyping-implies-typing/LR _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _).

%total (T2 T3 T4 T1)
(constyping-implies-typing/L _ _ _ _ _ _ _ _ _ _ T1 _ _ _ _ _)
(constyping-implies-typing/LR _ _ _ _ _ _ _ _ _ _ _ _ _ T3 _ _ _ _ _)
(constyping-implies-typing/LL _ _ _ _ _ _ _ _ _ _ _ _ _ _ T4 _ _ _ _ _)
(constyping-implies-typing/LMB _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ T2 _ _ _ _ _).



%theorem constpmatch-implies-proctypematch* :
        forall* {CM} {MM} {PM} {FM} {CTF} {W} {F} {OFL} {Pi} {Pi2} {S}
        forall  {CM-CM: clsmap-clsmap CM CM}
                {CM-MM: clsmap-methmap CM MM}
                {CM2PM: clsmap2predmap CM PM}
		{CM-OFL: clsmap-oflist CM OFL}			       
		{MM2W: methmap2progtype PM CM MM W}			      
                {OFL2P: oflist2perm PM OFL Pi}
                {EQV: equiv Pi (sharedPerm , Pi2)}
                {MC: constypematch* CM MM FM S OFL F CTF}
        exists  {PTF} {MT2PT: constp2proctype PM FM CTF PTF}
                {PC: proctypematch W (func/+ F) (proctype/arg PTF)}
        true.                

     

